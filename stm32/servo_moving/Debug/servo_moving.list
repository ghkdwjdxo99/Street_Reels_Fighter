
servo_moving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800486c  0800486c  0000586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ac  080048ac  00006070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080048ac  080048ac  000058ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b4  080048b4  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b4  080048b4  000058b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048b8  080048b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080048bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000070  0800492c  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  0800492c  000062c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5da  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e95  00000000  00000000  0001367a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00015510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a42  00000000  00000000  00016230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c1  00000000  00000000  00016c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e776  00000000  00000000  0002df33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009027b  00000000  00000000  0003c6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc924  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d64  00000000  00000000  000cc968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d06cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004854 	.word	0x08004854

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08004854 	.word	0x08004854

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Servo_AngleToUs>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint16_t Servo_AngleToUs(int angle)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(angle < 0) angle = 0;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	da01      	bge.n	8000516 <Servo_AngleToUs+0x12>
 8000512:	2300      	movs	r3, #0
 8000514:	607b      	str	r3, [r7, #4]
	if(angle > 180) angle = 180;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2bb4      	cmp	r3, #180	@ 0xb4
 800051a:	dd01      	ble.n	8000520 <Servo_AngleToUs+0x1c>
 800051c:	23b4      	movs	r3, #180	@ 0xb4
 800051e:	607b      	str	r3, [r7, #4]
	return SERVO_MIN_US + ((SERVO_MAX_US - SERVO_MIN_US) * angle / 180);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f640 0298 	movw	r2, #2200	@ 0x898
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	4a08      	ldr	r2, [pc, #32]	@ (800054c <Servo_AngleToUs+0x48>)
 800052c:	fb82 1203 	smull	r1, r2, r2, r3
 8000530:	441a      	add	r2, r3
 8000532:	11d2      	asrs	r2, r2, #7
 8000534:	17db      	asrs	r3, r3, #31
 8000536:	1ad3      	subs	r3, r2, r3
 8000538:	b29b      	uxth	r3, r3
 800053a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800053e:	b29b      	uxth	r3, r3
}
 8000540:	4618      	mov	r0, r3
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	b60b60b7 	.word	0xb60b60b7

08000550 <Servo_MoveOneStep>:
static void Servo_MoveOneStep(int direction)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	// direction = +1 -> (오른쪽 시계방향 +1도), -1 -> (왼쪽 반시게방향 -1도)
	currentAngle += direction;
 8000558:	4b10      	ldr	r3, [pc, #64]	@ (800059c <Servo_MoveOneStep+0x4c>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	4413      	add	r3, r2
 8000560:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <Servo_MoveOneStep+0x4c>)
 8000562:	6013      	str	r3, [r2, #0]

	if(currentAngle < 0)
 8000564:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <Servo_MoveOneStep+0x4c>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	da02      	bge.n	8000572 <Servo_MoveOneStep+0x22>
		currentAngle = 0;
 800056c:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <Servo_MoveOneStep+0x4c>)
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
	if(currentAngle > 180)
 8000572:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <Servo_MoveOneStep+0x4c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2bb4      	cmp	r3, #180	@ 0xb4
 8000578:	dd02      	ble.n	8000580 <Servo_MoveOneStep+0x30>
		currentAngle = 180;
 800057a:	4b08      	ldr	r3, [pc, #32]	@ (800059c <Servo_MoveOneStep+0x4c>)
 800057c:	22b4      	movs	r2, #180	@ 0xb4
 800057e:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, Servo_AngleToUs(currentAngle));
 8000580:	4b06      	ldr	r3, [pc, #24]	@ (800059c <Servo_MoveOneStep+0x4c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ffbd 	bl	8000504 <Servo_AngleToUs>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	4b04      	ldr	r3, [pc, #16]	@ (80005a0 <Servo_MoveOneStep+0x50>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000004 	.word	0x20000004
 80005a0:	2000008c 	.word	0x2000008c

080005a4 <Servo_Move_Mid>:
static void Servo_Move_Mid()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, Servo_AngleToUs(90));
 80005a8:	205a      	movs	r0, #90	@ 0x5a
 80005aa:	f7ff ffab 	bl	8000504 <Servo_AngleToUs>
 80005ae:	4603      	mov	r3, r0
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b02      	ldr	r3, [pc, #8]	@ (80005bc <Servo_Move_Mid+0x18>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	2000008c 	.word	0x2000008c

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 fd14 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f826 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 f9a4 	bl	8000918 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d0:	f000 f978 	bl	80008c4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005d4:	f000 f88a 	bl	80006ec <MX_TIM2_Init>
  MX_TIM3_Init();
 80005d8:	f000 f8fe 	bl	80007d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005dc:	2104      	movs	r1, #4
 80005de:	4809      	ldr	r0, [pc, #36]	@ (8000604 <main+0x44>)
 80005e0:	f001 fe5e 	bl	80022a0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80005e4:	4808      	ldr	r0, [pc, #32]	@ (8000608 <main+0x48>)
 80005e6:	f001 fd9f 	bl	8002128 <HAL_TIM_Base_Start_IT>
  printf("PWM started, moving servo to middle...\r\n");
 80005ea:	4808      	ldr	r0, [pc, #32]	@ (800060c <main+0x4c>)
 80005ec:	f003 fd9e 	bl	800412c <puts>

  Servo_Move_Mid();
 80005f0:	f7ff ffd8 	bl	80005a4 <Servo_Move_Mid>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005f4:	2201      	movs	r2, #1
 80005f6:	4906      	ldr	r1, [pc, #24]	@ (8000610 <main+0x50>)
 80005f8:	4806      	ldr	r0, [pc, #24]	@ (8000614 <main+0x54>)
 80005fa:	f002 fd47 	bl	800308c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	bf00      	nop
 8000600:	e7fd      	b.n	80005fe <main+0x3e>
 8000602:	bf00      	nop
 8000604:	2000008c 	.word	0x2000008c
 8000608:	200000d4 	.word	0x200000d4
 800060c:	0800486c 	.word	0x0800486c
 8000610:	20000168 	.word	0x20000168
 8000614:	2000011c 	.word	0x2000011c

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0320 	add.w	r3, r7, #32
 8000622:	2230      	movs	r2, #48	@ 0x30
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f003 fe60 	bl	80042ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a27      	ldr	r2, [pc, #156]	@ (80006e4 <SystemClock_Config+0xcc>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <SystemClock_Config+0xcc>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a21      	ldr	r2, [pc, #132]	@ (80006e8 <SystemClock_Config+0xd0>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <SystemClock_Config+0xd0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067c:	2310      	movs	r3, #16
 800067e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000680:	2302      	movs	r3, #2
 8000682:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000688:	2310      	movs	r3, #16
 800068a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800068c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000690:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000692:	2304      	movs	r3, #4
 8000694:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000696:	2304      	movs	r3, #4
 8000698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f85a 	bl	8001758 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006aa:	f000 fa53 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fabc 	bl	8001c48 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d6:	f000 fa3d 	bl	8000b54 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08e      	sub	sp, #56	@ 0x38
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
 8000718:	615a      	str	r2, [r3, #20]
 800071a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800071c:	4b2d      	ldr	r3, [pc, #180]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 800071e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 8000724:	4b2b      	ldr	r3, [pc, #172]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000726:	2254      	movs	r2, #84	@ 0x54
 8000728:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072a:	4b2a      	ldr	r3, [pc, #168]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000730:	4b28      	ldr	r3, [pc, #160]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000732:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000736:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000738:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073e:	4b25      	ldr	r3, [pc, #148]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000744:	4823      	ldr	r0, [pc, #140]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000746:	f001 fc9f 	bl	8002088 <HAL_TIM_Base_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000750:	f000 fa00 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000758:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800075a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800075e:	4619      	mov	r1, r3
 8000760:	481c      	ldr	r0, [pc, #112]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000762:	f001 ffff 	bl	8002764 <HAL_TIM_ConfigClockSource>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800076c:	f000 f9f2 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000770:	4818      	ldr	r0, [pc, #96]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000772:	f001 fd3b 	bl	80021ec <HAL_TIM_PWM_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800077c:	f000 f9ea 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000788:	f107 0320 	add.w	r3, r7, #32
 800078c:	4619      	mov	r1, r3
 800078e:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 8000790:	f002 fbaa 	bl	8002ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800079a:	f000 f9db 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079e:	2360      	movs	r3, #96	@ 0x60
 80007a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2204      	movs	r2, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 80007b6:	f001 ff13 	bl	80025e0 <HAL_TIM_PWM_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007c0:	f000 f9c8 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007c4:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <MX_TIM2_Init+0xe8>)
 80007c6:	f000 fa37 	bl	8000c38 <HAL_TIM_MspPostInit>

}
 80007ca:	bf00      	nop
 80007cc:	3738      	adds	r7, #56	@ 0x38
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000008c 	.word	0x2000008c

080007d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	@ 0x38
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]
 8000806:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000808:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800080a:	4a2d      	ldr	r2, [pc, #180]	@ (80008c0 <MX_TIM3_Init+0xe8>)
 800080c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 800080e:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <MX_TIM3_Init+0xe4>)
 8000810:	2254      	movs	r2, #84	@ 0x54
 8000812:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <MX_TIM3_Init+0xe4>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800081c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000820:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000822:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <MX_TIM3_Init+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000828:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800082e:	4823      	ldr	r0, [pc, #140]	@ (80008bc <MX_TIM3_Init+0xe4>)
 8000830:	f001 fc2a 	bl	8002088 <HAL_TIM_Base_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800083a:	f000 f98b 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000842:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000844:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000848:	4619      	mov	r1, r3
 800084a:	481c      	ldr	r0, [pc, #112]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800084c:	f001 ff8a 	bl	8002764 <HAL_TIM_ConfigClockSource>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000856:	f000 f97d 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800085a:	4818      	ldr	r0, [pc, #96]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800085c:	f001 fcc6 	bl	80021ec <HAL_TIM_PWM_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000866:	f000 f975 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4619      	mov	r1, r3
 8000878:	4810      	ldr	r0, [pc, #64]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800087a:	f002 fb35 	bl	8002ee8 <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000884:	f000 f966 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000888:	2360      	movs	r3, #96	@ 0x60
 800088a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2200      	movs	r2, #0
 800089c:	4619      	mov	r1, r3
 800089e:	4807      	ldr	r0, [pc, #28]	@ (80008bc <MX_TIM3_Init+0xe4>)
 80008a0:	f001 fe9e 	bl	80025e0 <HAL_TIM_PWM_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80008aa:	f000 f953 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008ae:	4803      	ldr	r0, [pc, #12]	@ (80008bc <MX_TIM3_Init+0xe4>)
 80008b0:	f000 f9c2 	bl	8000c38 <HAL_TIM_MspPostInit>

}
 80008b4:	bf00      	nop
 80008b6:	3738      	adds	r7, #56	@ 0x38
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200000d4 	.word	0x200000d4
 80008c0:	40000400 	.word	0x40000400

080008c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ca:	4a12      	ldr	r2, [pc, #72]	@ (8000914 <MX_USART2_UART_Init+0x50>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ce:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_USART2_UART_Init+0x4c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_USART2_UART_Init+0x4c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_USART2_UART_Init+0x4c>)
 80008fc:	f002 fb76 	bl	8002fec <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000906:	f000 f925 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000011c 	.word	0x2000011c
 8000914:	40004400 	.word	0x40004400

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b2d      	ldr	r3, [pc, #180]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a2c      	ldr	r2, [pc, #176]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b2a      	ldr	r3, [pc, #168]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b26      	ldr	r3, [pc, #152]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a25      	ldr	r2, [pc, #148]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b23      	ldr	r3, [pc, #140]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b1f      	ldr	r3, [pc, #124]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a1e      	ldr	r2, [pc, #120]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b1c      	ldr	r3, [pc, #112]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b18      	ldr	r3, [pc, #96]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a17      	ldr	r2, [pc, #92]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b15      	ldr	r3, [pc, #84]	@ (80009e8 <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2120      	movs	r1, #32
 80009a2:	4812      	ldr	r0, [pc, #72]	@ (80009ec <MX_GPIO_Init+0xd4>)
 80009a4:	f000 febe 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	480c      	ldr	r0, [pc, #48]	@ (80009f0 <MX_GPIO_Init+0xd8>)
 80009c0:	f000 fd2c 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c4:	2320      	movs	r3, #32
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	@ (80009ec <MX_GPIO_Init+0xd4>)
 80009dc:	f000 fd1e 	bl	800141c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	@ 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020800 	.word	0x40020800

080009f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) // 1ms마다 실행
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a1d      	ldr	r2, [pc, #116]	@ (8000a78 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d133      	bne.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x7a>
	{
		static int cnt = 0;
		cnt++;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a0e:	6013      	str	r3, [r2, #0]
		if(currentAngle != targetAngle)
 8000a10:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b1b      	ldr	r3, [pc, #108]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d002      	beq.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x2e>
		{
			moving = 1;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
		}

		if(moving && cnt == 10)
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d01a      	beq.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b0a      	cmp	r3, #10
 8000a30:	d116      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x6c>
		{
			int direction = (targetAngle > currentAngle) ? 1 : -1;
 8000a32:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dd01      	ble.n	8000a42 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e001      	b.n	8000a46 <HAL_TIM_PeriodElapsedCallback+0x52>
 8000a42:	f04f 33ff 	mov.w	r3, #4294967295
 8000a46:	60fb      	str	r3, [r7, #12]
			Servo_MoveOneStep(direction);
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fd81 	bl	8000550 <Servo_MoveOneStep>

			if(currentAngle == targetAngle)
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d102      	bne.n	8000a60 <HAL_TIM_PeriodElapsedCallback+0x6c>
				moving = 0;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
		}

		if(cnt >= 10)
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b09      	cmp	r3, #9
 8000a66:	dd02      	ble.n	8000a6e <HAL_TIM_PeriodElapsedCallback+0x7a>
			cnt = 0;
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
	}
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40000400 	.word	0x40000400
 8000a7c:	2000016c 	.word	0x2000016c
 8000a80:	20000004 	.word	0x20000004
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000164 	.word	0x20000164

08000a8c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a29      	ldr	r2, [pc, #164]	@ (8000b40 <HAL_UART_RxCpltCallback+0xb4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d14c      	bne.n	8000b38 <HAL_UART_RxCpltCallback+0xac>
	{
		switch(rx_data)
 8000a9e:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <HAL_UART_RxCpltCallback+0xb8>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	3b61      	subs	r3, #97	@ 0x61
 8000aa4:	2b16      	cmp	r3, #22
 8000aa6:	d842      	bhi.n	8000b2e <HAL_UART_RxCpltCallback+0xa2>
 8000aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab0 <HAL_UART_RxCpltCallback+0x24>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000b0d 	.word	0x08000b0d
 8000ab4:	08000b2f 	.word	0x08000b2f
 8000ab8:	08000b2f 	.word	0x08000b2f
 8000abc:	08000b1f 	.word	0x08000b1f
 8000ac0:	08000b2f 	.word	0x08000b2f
 8000ac4:	08000b2f 	.word	0x08000b2f
 8000ac8:	08000b2f 	.word	0x08000b2f
 8000acc:	08000b2f 	.word	0x08000b2f
 8000ad0:	08000b2f 	.word	0x08000b2f
 8000ad4:	08000b2f 	.word	0x08000b2f
 8000ad8:	08000b2f 	.word	0x08000b2f
 8000adc:	08000b2f 	.word	0x08000b2f
 8000ae0:	08000b2f 	.word	0x08000b2f
 8000ae4:	08000b2f 	.word	0x08000b2f
 8000ae8:	08000b2f 	.word	0x08000b2f
 8000aec:	08000b2f 	.word	0x08000b2f
 8000af0:	08000b2f 	.word	0x08000b2f
 8000af4:	08000b2f 	.word	0x08000b2f
 8000af8:	08000b15 	.word	0x08000b15
 8000afc:	08000b2f 	.word	0x08000b2f
 8000b00:	08000b2f 	.word	0x08000b2f
 8000b04:	08000b2f 	.word	0x08000b2f
 8000b08:	08000b27 	.word	0x08000b27
		{
			case 'a':
				targetAngle = 180;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_UART_RxCpltCallback+0xbc>)
 8000b0e:	22b4      	movs	r2, #180	@ 0xb4
 8000b10:	601a      	str	r2, [r3, #0]
				break;
 8000b12:	e00c      	b.n	8000b2e <HAL_UART_RxCpltCallback+0xa2>
			case 's':
				targetAngle = currentAngle;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_UART_RxCpltCallback+0xc0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0b      	ldr	r2, [pc, #44]	@ (8000b48 <HAL_UART_RxCpltCallback+0xbc>)
 8000b1a:	6013      	str	r3, [r2, #0]
				break;
 8000b1c:	e007      	b.n	8000b2e <HAL_UART_RxCpltCallback+0xa2>
			case 'd':
				targetAngle = 0;
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_UART_RxCpltCallback+0xbc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
				break;
 8000b24:	e003      	b.n	8000b2e <HAL_UART_RxCpltCallback+0xa2>
			case 'w':
				targetAngle = 90;
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_UART_RxCpltCallback+0xbc>)
 8000b28:	225a      	movs	r2, #90	@ 0x5a
 8000b2a:	601a      	str	r2, [r3, #0]
				break;
 8000b2c:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart2, &rx_data, 1); // 다음 바이트 받기
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4904      	ldr	r1, [pc, #16]	@ (8000b44 <HAL_UART_RxCpltCallback+0xb8>)
 8000b32:	4807      	ldr	r0, [pc, #28]	@ (8000b50 <HAL_UART_RxCpltCallback+0xc4>)
 8000b34:	f002 faaa 	bl	800308c <HAL_UART_Receive_IT>
	}
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40004400 	.word	0x40004400
 8000b44:	20000168 	.word	0x20000168
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	2000011c 	.word	0x2000011c

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <Error_Handler+0x8>

08000b60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <HAL_MspInit+0x4c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	@ (8000bac <HAL_MspInit+0x4c>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b9e:	2007      	movs	r0, #7
 8000ba0:	f000 fb68 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bc0:	d116      	bne.n	8000bf0 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <HAL_TIM_Base_MspInit+0x80>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <HAL_TIM_Base_MspInit+0x80>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd2:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <HAL_TIM_Base_MspInit+0x80>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	201c      	movs	r0, #28
 8000be4:	f000 fb51 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000be8:	201c      	movs	r0, #28
 8000bea:	f000 fb6a 	bl	80012c2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bee:	e01a      	b.n	8000c26 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <HAL_TIM_Base_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d115      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_TIM_Base_MspInit+0x80>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <HAL_TIM_Base_MspInit+0x80>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <HAL_TIM_Base_MspInit+0x80>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	201d      	movs	r0, #29
 8000c1c:	f000 fb35 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c20:	201d      	movs	r0, #29
 8000c22:	f000 fb4e 	bl	80012c2 <HAL_NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40000400 	.word	0x40000400

08000c38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	@ 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c58:	d11e      	bne.n	8000c98 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <HAL_TIM_MspPostInit+0xb0>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a21      	ldr	r2, [pc, #132]	@ (8000ce8 <HAL_TIM_MspPostInit+0xb0>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce8 <HAL_TIM_MspPostInit+0xb0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c76:	2302      	movs	r3, #2
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c86:	2301      	movs	r3, #1
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4816      	ldr	r0, [pc, #88]	@ (8000cec <HAL_TIM_MspPostInit+0xb4>)
 8000c92:	f000 fbc3 	bl	800141c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c96:	e022      	b.n	8000cde <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <HAL_TIM_MspPostInit+0xb8>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d11d      	bne.n	8000cde <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <HAL_TIM_MspPostInit+0xb0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <HAL_TIM_MspPostInit+0xb0>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <HAL_TIM_MspPostInit+0xb0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cbe:	2340      	movs	r3, #64	@ 0x40
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4804      	ldr	r0, [pc, #16]	@ (8000cec <HAL_TIM_MspPostInit+0xb4>)
 8000cda:	f000 fb9f 	bl	800141c <HAL_GPIO_Init>
}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	@ 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40000400 	.word	0x40000400

08000cf4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a1d      	ldr	r2, [pc, #116]	@ (8000d88 <HAL_UART_MspInit+0x94>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d133      	bne.n	8000d7e <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a14      	ldr	r2, [pc, #80]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_UART_MspInit+0x98>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d4e:	230c      	movs	r3, #12
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <HAL_UART_MspInit+0x9c>)
 8000d6a:	f000 fb57 	bl	800141c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	2100      	movs	r1, #0
 8000d72:	2026      	movs	r0, #38	@ 0x26
 8000d74:	f000 fa89 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d78:	2026      	movs	r0, #38	@ 0x26
 8000d7a:	f000 faa2 	bl	80012c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	@ 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40004400 	.word	0x40004400
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020000 	.word	0x40020000

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <NMI_Handler+0x4>

08000d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <MemManage_Handler+0x4>

08000dac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dea:	f000 f953 	bl	8001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df8:	4802      	ldr	r0, [pc, #8]	@ (8000e04 <TIM2_IRQHandler+0x10>)
 8000dfa:	f001 fb01 	bl	8002400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000008c 	.word	0x2000008c

08000e08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e0c:	4802      	ldr	r0, [pc, #8]	@ (8000e18 <TIM3_IRQHandler+0x10>)
 8000e0e:	f001 faf7 	bl	8002400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000d4 	.word	0x200000d4

08000e1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <USART2_IRQHandler+0x10>)
 8000e22:	f002 f959 	bl	80030d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000011c 	.word	0x2000011c

08000e30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e00a      	b.n	8000e58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e42:	f3af 8000 	nop.w
 8000e46:	4601      	mov	r1, r0
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	60ba      	str	r2, [r7, #8]
 8000e4e:	b2ca      	uxtb	r2, r1
 8000e50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbf0      	blt.n	8000e42 <_read+0x12>
  }

  return len;
 8000e60:	687b      	ldr	r3, [r7, #4]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	60f8      	str	r0, [r7, #12]
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	e009      	b.n	8000e90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	60ba      	str	r2, [r7, #8]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf1      	blt.n	8000e7c <_write+0x12>
  }
  return len;
 8000e98:	687b      	ldr	r3, [r7, #4]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_close>:

int _close(int file)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000eca:	605a      	str	r2, [r3, #4]
  return 0;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <_isatty>:

int _isatty(int file)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f14:	4a14      	ldr	r2, [pc, #80]	@ (8000f68 <_sbrk+0x5c>)
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <_sbrk+0x60>)
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <_sbrk+0x64>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <_sbrk+0x64>)
 8000f2a:	4a12      	ldr	r2, [pc, #72]	@ (8000f74 <_sbrk+0x68>)
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d207      	bcs.n	8000f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f3c:	f003 fa24 	bl	8004388 <__errno>
 8000f40:	4603      	mov	r3, r0
 8000f42:	220c      	movs	r2, #12
 8000f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e009      	b.n	8000f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f52:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a05      	ldr	r2, [pc, #20]	@ (8000f70 <_sbrk+0x64>)
 8000f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20020000 	.word	0x20020000
 8000f6c:	00000400 	.word	0x00000400
 8000f70:	20000170 	.word	0x20000170
 8000f74:	200002c8 	.word	0x200002c8

08000f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <SystemInit+0x20>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f82:	4a05      	ldr	r2, [pc, #20]	@ (8000f98 <SystemInit+0x20>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa0:	f7ff ffea 	bl	8000f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	@ (8000fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	@ (8000fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fca:	f003 f9e3 	bl	8004394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fce:	f7ff faf7 	bl	80005c0 <main>
  bx  lr    
 8000fd2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fe0:	080048bc 	.word	0x080048bc
  ldr r2, =_sbss
 8000fe4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fe8:	200002c4 	.word	0x200002c4

08000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_Init+0x40>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <HAL_Init+0x40>)
 8000ffa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001000:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <HAL_Init+0x40>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <HAL_Init+0x40>)
 8001006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800100a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <HAL_Init+0x40>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a07      	ldr	r2, [pc, #28]	@ (8001030 <HAL_Init+0x40>)
 8001012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001018:	2003      	movs	r0, #3
 800101a:	f000 f92b 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101e:	2000      	movs	r0, #0
 8001020:	f000 f808 	bl	8001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001024:	f7ff fd9c 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40023c00 	.word	0x40023c00

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_InitTick+0x54>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_InitTick+0x58>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104a:	fbb3 f3f1 	udiv	r3, r3, r1
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f943 	bl	80012de <HAL_SYSTICK_Config>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e00e      	b.n	8001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b0f      	cmp	r3, #15
 8001066:	d80a      	bhi.n	800107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001068:	2200      	movs	r2, #0
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	f04f 30ff 	mov.w	r0, #4294967295
 8001070:	f000 f90b 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001074:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <HAL_InitTick+0x5c>)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000008 	.word	0x20000008
 800108c:	20000010 	.word	0x20000010
 8001090:	2000000c 	.word	0x2000000c

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000010 	.word	0x20000010
 80010b8:	20000174 	.word	0x20000174

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	@ (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000174 	.word	0x20000174

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4907      	ldr	r1, [pc, #28]	@ (8001170 <__NVIC_EnableIRQ+0x38>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	@ (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	@ (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	@ 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	@ (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff8e 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff29 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff3e 	bl	800111c <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff8e 	bl	80011c8 <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5d 	bl	8001174 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff31 	bl	8001138 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa2 	bl	8001230 <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b084      	sub	sp, #16
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001302:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff feda 	bl	80010bc <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d008      	beq.n	8001328 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2280      	movs	r2, #128	@ 0x80
 800131a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e052      	b.n	80013ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0216 	bic.w	r2, r2, #22
 8001336:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001346:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	2b00      	cmp	r3, #0
 800134e:	d103      	bne.n	8001358 <HAL_DMA_Abort+0x62>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0208 	bic.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001378:	e013      	b.n	80013a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800137a:	f7ff fe9f 	bl	80010bc <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b05      	cmp	r3, #5
 8001386:	d90c      	bls.n	80013a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2220      	movs	r2, #32
 800138c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2203      	movs	r2, #3
 8001392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e015      	b.n	80013ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e4      	bne.n	800137a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013b4:	223f      	movs	r2, #63	@ 0x3f
 80013b6:	409a      	lsls	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d004      	beq.n	80013f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2280      	movs	r2, #128	@ 0x80
 80013ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e00c      	b.n	800140e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2205      	movs	r2, #5
 80013f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	@ 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
 8001436:	e159      	b.n	80016ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001438:	2201      	movs	r2, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	429a      	cmp	r2, r3
 8001452:	f040 8148 	bne.w	80016e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b01      	cmp	r3, #1
 8001460:	d005      	beq.n	800146e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	2b02      	cmp	r3, #2
 800146c:	d130      	bne.n	80014d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	68da      	ldr	r2, [r3, #12]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a4:	2201      	movs	r2, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	091b      	lsrs	r3, r3, #4
 80014ba:	f003 0201 	and.w	r2, r3, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d017      	beq.n	800150c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d123      	bne.n	8001560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	69b9      	ldr	r1, [r7, #24]
 800155c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0203 	and.w	r2, r3, #3
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80a2 	beq.w	80016e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	4a56      	ldr	r2, [pc, #344]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b2:	4b54      	ldr	r3, [pc, #336]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015be:	4a52      	ldr	r2, [pc, #328]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	220f      	movs	r2, #15
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a49      	ldr	r2, [pc, #292]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x202>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a48      	ldr	r2, [pc, #288]	@ (8001710 <HAL_GPIO_Init+0x2f4>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x1fe>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a47      	ldr	r2, [pc, #284]	@ (8001714 <HAL_GPIO_Init+0x2f8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x1fa>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a46      	ldr	r2, [pc, #280]	@ (8001718 <HAL_GPIO_Init+0x2fc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x1f6>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a45      	ldr	r2, [pc, #276]	@ (800171c <HAL_GPIO_Init+0x300>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x1f2>
 800160a:	2304      	movs	r3, #4
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800160e:	2307      	movs	r3, #7
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x204>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x204>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x204>
 800161e:	2300      	movs	r3, #0
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163e:	4b38      	ldr	r3, [pc, #224]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001662:	4a2f      	ldr	r2, [pc, #188]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001668:	4b2d      	ldr	r3, [pc, #180]	@ (8001720 <HAL_GPIO_Init+0x304>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800168c:	4a24      	ldr	r2, [pc, #144]	@ (8001720 <HAL_GPIO_Init+0x304>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001692:	4b23      	ldr	r3, [pc, #140]	@ (8001720 <HAL_GPIO_Init+0x304>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001720 <HAL_GPIO_Init+0x304>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	f67f aea2 	bls.w	8001438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40013c00 	.word	0x40013c00

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001740:	e003      	b.n	800174a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001742:	887b      	ldrh	r3, [r7, #2]
 8001744:	041a      	lsls	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e267      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d075      	beq.n	8001862 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001776:	4b88      	ldr	r3, [pc, #544]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b04      	cmp	r3, #4
 8001780:	d00c      	beq.n	800179c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001782:	4b85      	ldr	r3, [pc, #532]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800178a:	2b08      	cmp	r3, #8
 800178c:	d112      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178e:	4b82      	ldr	r3, [pc, #520]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001796:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800179a:	d10b      	bne.n	80017b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	4b7e      	ldr	r3, [pc, #504]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d05b      	beq.n	8001860 <HAL_RCC_OscConfig+0x108>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d157      	bne.n	8001860 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e242      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017bc:	d106      	bne.n	80017cc <HAL_RCC_OscConfig+0x74>
 80017be:	4b76      	ldr	r3, [pc, #472]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a75      	ldr	r2, [pc, #468]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017c8:	6013      	str	r3, [r2, #0]
 80017ca:	e01d      	b.n	8001808 <HAL_RCC_OscConfig+0xb0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x98>
 80017d6:	4b70      	ldr	r3, [pc, #448]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a6f      	ldr	r2, [pc, #444]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0xb0>
 80017f0:	4b69      	ldr	r3, [pc, #420]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a68      	ldr	r2, [pc, #416]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b66      	ldr	r3, [pc, #408]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a65      	ldr	r2, [pc, #404]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001806:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d013      	beq.n	8001838 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fc54 	bl	80010bc <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff fc50 	bl	80010bc <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	@ 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e207      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b5b      	ldr	r3, [pc, #364]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0xc0>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff fc40 	bl	80010bc <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fc3c 	bl	80010bc <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	@ 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e1f3      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	4b51      	ldr	r3, [pc, #324]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0xe8>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d063      	beq.n	8001936 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800186e:	4b4a      	ldr	r3, [pc, #296]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187a:	4b47      	ldr	r3, [pc, #284]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001882:	2b08      	cmp	r3, #8
 8001884:	d11c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001886:	4b44      	ldr	r3, [pc, #272]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d005      	beq.n	80018aa <HAL_RCC_OscConfig+0x152>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e1c7      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4937      	ldr	r1, [pc, #220]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	e03a      	b.n	8001936 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c8:	4b34      	ldr	r3, [pc, #208]	@ (800199c <HAL_RCC_OscConfig+0x244>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ce:	f7ff fbf5 	bl	80010bc <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fbf1 	bl	80010bc <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e1a8      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0f0      	beq.n	80018d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f4:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4925      	ldr	r1, [pc, #148]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
 8001908:	e015      	b.n	8001936 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800190a:	4b24      	ldr	r3, [pc, #144]	@ (800199c <HAL_RCC_OscConfig+0x244>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff fbd4 	bl	80010bc <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001918:	f7ff fbd0 	bl	80010bc <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e187      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192a:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d036      	beq.n	80019b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d016      	beq.n	8001978 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_RCC_OscConfig+0x248>)
 800194c:	2201      	movs	r2, #1
 800194e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff fbb4 	bl	80010bc <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fbb0 	bl	80010bc <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e167      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800196a:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <HAL_RCC_OscConfig+0x240>)
 800196c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x200>
 8001976:	e01b      	b.n	80019b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001978:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_RCC_OscConfig+0x248>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff fb9d 	bl	80010bc <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	e00e      	b.n	80019a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff fb99 	bl	80010bc <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d907      	bls.n	80019a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e150      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
 8001998:	40023800 	.word	0x40023800
 800199c:	42470000 	.word	0x42470000
 80019a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a4:	4b88      	ldr	r3, [pc, #544]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 80019a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1ea      	bne.n	8001986 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 8097 	beq.w	8001aec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019c2:	4b81      	ldr	r3, [pc, #516]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	4b7d      	ldr	r3, [pc, #500]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a7c      	ldr	r2, [pc, #496]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019de:	4b7a      	ldr	r3, [pc, #488]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ea:	2301      	movs	r3, #1
 80019ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ee:	4b77      	ldr	r3, [pc, #476]	@ (8001bcc <HAL_RCC_OscConfig+0x474>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d118      	bne.n	8001a2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019fa:	4b74      	ldr	r3, [pc, #464]	@ (8001bcc <HAL_RCC_OscConfig+0x474>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a73      	ldr	r2, [pc, #460]	@ (8001bcc <HAL_RCC_OscConfig+0x474>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fb59 	bl	80010bc <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7ff fb55 	bl	80010bc <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e10c      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b6a      	ldr	r3, [pc, #424]	@ (8001bcc <HAL_RCC_OscConfig+0x474>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x2ea>
 8001a34:	4b64      	ldr	r3, [pc, #400]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a38:	4a63      	ldr	r2, [pc, #396]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a40:	e01c      	b.n	8001a7c <HAL_RCC_OscConfig+0x324>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x30c>
 8001a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a56:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0x324>
 8001a64:	4b58      	ldr	r3, [pc, #352]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a68:	4a57      	ldr	r2, [pc, #348]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a70:	4b55      	ldr	r3, [pc, #340]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a74:	4a54      	ldr	r2, [pc, #336]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001a76:	f023 0304 	bic.w	r3, r3, #4
 8001a7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d015      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff fb1a 	bl	80010bc <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fb16 	bl	80010bc <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0cb      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aa2:	4b49      	ldr	r3, [pc, #292]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0ee      	beq.n	8001a8c <HAL_RCC_OscConfig+0x334>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fb04 	bl	80010bc <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fb00 	bl	80010bc <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0b5      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ace:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ee      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ada:	7dfb      	ldrb	r3, [r7, #23]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	4a38      	ldr	r2, [pc, #224]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a1 	beq.w	8001c38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001af6:	4b34      	ldr	r3, [pc, #208]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d05c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d141      	bne.n	8001b8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0a:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <HAL_RCC_OscConfig+0x478>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fad4 	bl	80010bc <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff fad0 	bl	80010bc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e087      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b44:	019b      	lsls	r3, r3, #6
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	085b      	lsrs	r3, r3, #1
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	041b      	lsls	r3, r3, #16
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	061b      	lsls	r3, r3, #24
 8001b5a:	491b      	ldr	r1, [pc, #108]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b60:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <HAL_RCC_OscConfig+0x478>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff faa9 	bl	80010bc <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7ff faa5 	bl	80010bc <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e05c      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x416>
 8001b8c:	e054      	b.n	8001c38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <HAL_RCC_OscConfig+0x478>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fa92 	bl	80010bc <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7ff fa8e 	bl	80010bc <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e045      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x444>
 8001bba:	e03d      	b.n	8001c38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e038      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40007000 	.word	0x40007000
 8001bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <HAL_RCC_OscConfig+0x4ec>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d028      	beq.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d121      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d11a      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d111      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800

08001c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e0cc      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c5c:	4b68      	ldr	r3, [pc, #416]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0307 	and.w	r3, r3, #7
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d90c      	bls.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6a:	4b65      	ldr	r3, [pc, #404]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c72:	4b63      	ldr	r3, [pc, #396]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c9c:	4b59      	ldr	r3, [pc, #356]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	4a58      	ldr	r2, [pc, #352]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ca6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb4:	4b53      	ldr	r3, [pc, #332]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	4a52      	ldr	r2, [pc, #328]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cc0:	4b50      	ldr	r3, [pc, #320]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	494d      	ldr	r1, [pc, #308]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d044      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce6:	4b47      	ldr	r3, [pc, #284]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d119      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e07f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d003      	beq.n	8001d06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	4b3f      	ldr	r3, [pc, #252]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e06f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d16:	4b3b      	ldr	r3, [pc, #236]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e067      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d26:	4b37      	ldr	r3, [pc, #220]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f023 0203 	bic.w	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4934      	ldr	r1, [pc, #208]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d38:	f7ff f9c0 	bl	80010bc <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7ff f9bc 	bl	80010bc <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e04f      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d56:	4b2b      	ldr	r3, [pc, #172]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 020c 	and.w	r2, r3, #12
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d1eb      	bne.n	8001d40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d68:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d20c      	bcs.n	8001d90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <HAL_RCC_ClockConfig+0x1b8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e032      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4916      	ldr	r1, [pc, #88]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0308 	and.w	r3, r3, #8
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d009      	beq.n	8001dce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	490e      	ldr	r1, [pc, #56]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dce:	f000 f821 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	490a      	ldr	r1, [pc, #40]	@ (8001e08 <HAL_RCC_ClockConfig+0x1c0>)
 8001de0:	5ccb      	ldrb	r3, [r1, r3]
 8001de2:	fa22 f303 	lsr.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	@ (8001e0c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_RCC_ClockConfig+0x1c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f920 	bl	8001034 <HAL_InitTick>

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00
 8001e04:	40023800 	.word	0x40023800
 8001e08:	08004894 	.word	0x08004894
 8001e0c:	20000008 	.word	0x20000008
 8001e10:	2000000c 	.word	0x2000000c

08001e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e18:	b094      	sub	sp, #80	@ 0x50
 8001e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e2c:	4b79      	ldr	r3, [pc, #484]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d00d      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x40>
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	f200 80e1 	bhi.w	8002000 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x34>
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d003      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e46:	e0db      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b73      	ldr	r3, [pc, #460]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e4c:	e0db      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e4e:	4b73      	ldr	r3, [pc, #460]	@ (800201c <HAL_RCC_GetSysClockFreq+0x208>)
 8001e50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e52:	e0d8      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e54:	4b6f      	ldr	r3, [pc, #444]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d063      	beq.n	8001f32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	099b      	lsrs	r3, r3, #6
 8001e70:	2200      	movs	r2, #0
 8001e72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e7e:	2300      	movs	r3, #0
 8001e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e86:	4622      	mov	r2, r4
 8001e88:	462b      	mov	r3, r5
 8001e8a:	f04f 0000 	mov.w	r0, #0
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	0159      	lsls	r1, r3, #5
 8001e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e98:	0150      	lsls	r0, r2, #5
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4621      	mov	r1, r4
 8001ea0:	1a51      	subs	r1, r2, r1
 8001ea2:	6139      	str	r1, [r7, #16]
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	eb63 0301 	sbc.w	r3, r3, r1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001eb8:	4659      	mov	r1, fp
 8001eba:	018b      	lsls	r3, r1, #6
 8001ebc:	4651      	mov	r1, sl
 8001ebe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ec2:	4651      	mov	r1, sl
 8001ec4:	018a      	lsls	r2, r1, #6
 8001ec6:	4651      	mov	r1, sl
 8001ec8:	ebb2 0801 	subs.w	r8, r2, r1
 8001ecc:	4659      	mov	r1, fp
 8001ece:	eb63 0901 	sbc.w	r9, r3, r1
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ede:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ee2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ee6:	4690      	mov	r8, r2
 8001ee8:	4699      	mov	r9, r3
 8001eea:	4623      	mov	r3, r4
 8001eec:	eb18 0303 	adds.w	r3, r8, r3
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	462b      	mov	r3, r5
 8001ef4:	eb49 0303 	adc.w	r3, r9, r3
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f04f 0300 	mov.w	r3, #0
 8001f02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f06:	4629      	mov	r1, r5
 8001f08:	024b      	lsls	r3, r1, #9
 8001f0a:	4621      	mov	r1, r4
 8001f0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f10:	4621      	mov	r1, r4
 8001f12:	024a      	lsls	r2, r1, #9
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f24:	f7fe f958 	bl	80001d8 <__aeabi_uldivmod>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f30:	e058      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f32:	4b38      	ldr	r3, [pc, #224]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	099b      	lsrs	r3, r3, #6
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f42:	623b      	str	r3, [r7, #32]
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f4c:	4642      	mov	r2, r8
 8001f4e:	464b      	mov	r3, r9
 8001f50:	f04f 0000 	mov.w	r0, #0
 8001f54:	f04f 0100 	mov.w	r1, #0
 8001f58:	0159      	lsls	r1, r3, #5
 8001f5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f5e:	0150      	lsls	r0, r2, #5
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4641      	mov	r1, r8
 8001f66:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f6a:	4649      	mov	r1, r9
 8001f6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f84:	ebb2 040a 	subs.w	r4, r2, sl
 8001f88:	eb63 050b 	sbc.w	r5, r3, fp
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	00eb      	lsls	r3, r5, #3
 8001f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f9a:	00e2      	lsls	r2, r4, #3
 8001f9c:	4614      	mov	r4, r2
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	4643      	mov	r3, r8
 8001fa2:	18e3      	adds	r3, r4, r3
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	464b      	mov	r3, r9
 8001fa8:	eb45 0303 	adc.w	r3, r5, r3
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fba:	4629      	mov	r1, r5
 8001fbc:	028b      	lsls	r3, r1, #10
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	028a      	lsls	r2, r1, #10
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	61fa      	str	r2, [r7, #28]
 8001fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fd8:	f7fe f8fe 	bl	80001d8 <__aeabi_uldivmod>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	0c1b      	lsrs	r3, r3, #16
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	3301      	adds	r3, #1
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ff4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ffe:	e002      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002000:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_RCC_GetSysClockFreq+0x204>)
 8002002:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002008:	4618      	mov	r0, r3
 800200a:	3750      	adds	r7, #80	@ 0x50
 800200c:	46bd      	mov	sp, r7
 800200e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800
 8002018:	00f42400 	.word	0x00f42400
 800201c:	007a1200 	.word	0x007a1200

08002020 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002024:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <HAL_RCC_GetHCLKFreq+0x14>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000008 	.word	0x20000008

08002038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800203c:	f7ff fff0 	bl	8002020 <HAL_RCC_GetHCLKFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	0a9b      	lsrs	r3, r3, #10
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	4903      	ldr	r1, [pc, #12]	@ (800205c <HAL_RCC_GetPCLK1Freq+0x24>)
 800204e:	5ccb      	ldrb	r3, [r1, r3]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	080048a4 	.word	0x080048a4

08002060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002064:	f7ff ffdc 	bl	8002020 <HAL_RCC_GetHCLKFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <HAL_RCC_GetPCLK2Freq+0x20>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0b5b      	lsrs	r3, r3, #13
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4903      	ldr	r1, [pc, #12]	@ (8002084 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	080048a4 	.word	0x080048a4

08002088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e041      	b.n	800211e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fd7e 	bl	8000bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f000 fc3c 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	d001      	beq.n	8002140 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e044      	b.n	80021ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1e      	ldr	r2, [pc, #120]	@ (80021d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d018      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x6c>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800216a:	d013      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x6c>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1a      	ldr	r2, [pc, #104]	@ (80021dc <HAL_TIM_Base_Start_IT+0xb4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00e      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x6c>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a19      	ldr	r2, [pc, #100]	@ (80021e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x6c>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d004      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x6c>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a16      	ldr	r2, [pc, #88]	@ (80021e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d111      	bne.n	80021b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d010      	beq.n	80021c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0201 	orr.w	r2, r2, #1
 80021b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	e007      	b.n	80021c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40010000 	.word	0x40010000
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40000800 	.word	0x40000800
 80021e4:	40000c00 	.word	0x40000c00
 80021e8:	40014000 	.word	0x40014000

080021ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e041      	b.n	8002282 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f839 	bl	800228a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	4619      	mov	r1, r3
 800222a:	4610      	mov	r0, r2
 800222c:	f000 fb8a 	bl	8002944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_TIM_PWM_Start+0x24>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e022      	b.n	800230a <HAL_TIM_PWM_Start+0x6a>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d109      	bne.n	80022de <HAL_TIM_PWM_Start+0x3e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	bf14      	ite	ne
 80022d6:	2301      	movne	r3, #1
 80022d8:	2300      	moveq	r3, #0
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	e015      	b.n	800230a <HAL_TIM_PWM_Start+0x6a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d109      	bne.n	80022f8 <HAL_TIM_PWM_Start+0x58>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	e008      	b.n	800230a <HAL_TIM_PWM_Start+0x6a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	bf14      	ite	ne
 8002304:	2301      	movne	r3, #1
 8002306:	2300      	moveq	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e068      	b.n	80023e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <HAL_TIM_PWM_Start+0x82>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002320:	e013      	b.n	800234a <HAL_TIM_PWM_Start+0xaa>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d104      	bne.n	8002332 <HAL_TIM_PWM_Start+0x92>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002330:	e00b      	b.n	800234a <HAL_TIM_PWM_Start+0xaa>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d104      	bne.n	8002342 <HAL_TIM_PWM_Start+0xa2>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2202      	movs	r2, #2
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002340:	e003      	b.n	800234a <HAL_TIM_PWM_Start+0xaa>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2202      	movs	r2, #2
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	6839      	ldr	r1, [r7, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fda2 	bl	8002e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a23      	ldr	r2, [pc, #140]	@ (80023ec <HAL_TIM_PWM_Start+0x14c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d107      	bne.n	8002372 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002370:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1d      	ldr	r2, [pc, #116]	@ (80023ec <HAL_TIM_PWM_Start+0x14c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d018      	beq.n	80023ae <HAL_TIM_PWM_Start+0x10e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002384:	d013      	beq.n	80023ae <HAL_TIM_PWM_Start+0x10e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a19      	ldr	r2, [pc, #100]	@ (80023f0 <HAL_TIM_PWM_Start+0x150>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00e      	beq.n	80023ae <HAL_TIM_PWM_Start+0x10e>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a17      	ldr	r2, [pc, #92]	@ (80023f4 <HAL_TIM_PWM_Start+0x154>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d009      	beq.n	80023ae <HAL_TIM_PWM_Start+0x10e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a16      	ldr	r2, [pc, #88]	@ (80023f8 <HAL_TIM_PWM_Start+0x158>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d004      	beq.n	80023ae <HAL_TIM_PWM_Start+0x10e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a14      	ldr	r2, [pc, #80]	@ (80023fc <HAL_TIM_PWM_Start+0x15c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d111      	bne.n	80023d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b06      	cmp	r3, #6
 80023be:	d010      	beq.n	80023e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d0:	e007      	b.n	80023e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40000c00 	.word	0x40000c00
 80023fc:	40014000 	.word	0x40014000

08002400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d020      	beq.n	8002464 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01b      	beq.n	8002464 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0202 	mvn.w	r2, #2
 8002434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fa5b 	bl	8002906 <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 fa4d 	bl	80028f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fa5e 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d020      	beq.n	80024b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01b      	beq.n	80024b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0204 	mvn.w	r2, #4
 8002480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2202      	movs	r2, #2
 8002486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fa35 	bl	8002906 <HAL_TIM_IC_CaptureCallback>
 800249c:	e005      	b.n	80024aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa27 	bl	80028f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 fa38 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d020      	beq.n	80024fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0208 	mvn.w	r2, #8
 80024cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2204      	movs	r2, #4
 80024d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa0f 	bl	8002906 <HAL_TIM_IC_CaptureCallback>
 80024e8:	e005      	b.n	80024f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa01 	bl	80028f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fa12 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d020      	beq.n	8002548 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01b      	beq.n	8002548 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f06f 0210 	mvn.w	r2, #16
 8002518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2208      	movs	r2, #8
 800251e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f9e9 	bl	8002906 <HAL_TIM_IC_CaptureCallback>
 8002534:	e005      	b.n	8002542 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f000 f9db 	bl	80028f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f000 f9ec 	bl	800291a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00c      	beq.n	800256c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0201 	mvn.w	r2, #1
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe fa44 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fd24 	bl	8002fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f9bd 	bl	800292e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0220 	mvn.w	r2, #32
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 fcf6 	bl	8002fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	2300      	movs	r3, #0
 80025ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e0ae      	b.n	800275c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	f200 809f 	bhi.w	800274c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800260e:	a201      	add	r2, pc, #4	@ (adr r2, 8002614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002614:	08002649 	.word	0x08002649
 8002618:	0800274d 	.word	0x0800274d
 800261c:	0800274d 	.word	0x0800274d
 8002620:	0800274d 	.word	0x0800274d
 8002624:	08002689 	.word	0x08002689
 8002628:	0800274d 	.word	0x0800274d
 800262c:	0800274d 	.word	0x0800274d
 8002630:	0800274d 	.word	0x0800274d
 8002634:	080026cb 	.word	0x080026cb
 8002638:	0800274d 	.word	0x0800274d
 800263c:	0800274d 	.word	0x0800274d
 8002640:	0800274d 	.word	0x0800274d
 8002644:	0800270b 	.word	0x0800270b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f9fe 	bl	8002a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0208 	orr.w	r2, r2, #8
 8002662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6999      	ldr	r1, [r3, #24]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	619a      	str	r2, [r3, #24]
      break;
 8002686:	e064      	b.n	8002752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fa44 	bl	8002b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6999      	ldr	r1, [r3, #24]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	021a      	lsls	r2, r3, #8
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	619a      	str	r2, [r3, #24]
      break;
 80026c8:	e043      	b.n	8002752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fa8f 	bl	8002bf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0208 	orr.w	r2, r2, #8
 80026e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0204 	bic.w	r2, r2, #4
 80026f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69d9      	ldr	r1, [r3, #28]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	61da      	str	r2, [r3, #28]
      break;
 8002708:	e023      	b.n	8002752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fad9 	bl	8002cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69d9      	ldr	r1, [r3, #28]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	021a      	lsls	r2, r3, #8
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	61da      	str	r2, [r3, #28]
      break;
 800274a:	e002      	b.n	8002752 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	75fb      	strb	r3, [r7, #23]
      break;
 8002750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800275a:	7dfb      	ldrb	r3, [r7, #23]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_TIM_ConfigClockSource+0x1c>
 800277c:	2302      	movs	r3, #2
 800277e:	e0b4      	b.n	80028ea <HAL_TIM_ConfigClockSource+0x186>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800279e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027b8:	d03e      	beq.n	8002838 <HAL_TIM_ConfigClockSource+0xd4>
 80027ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027be:	f200 8087 	bhi.w	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c6:	f000 8086 	beq.w	80028d6 <HAL_TIM_ConfigClockSource+0x172>
 80027ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ce:	d87f      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b70      	cmp	r3, #112	@ 0x70
 80027d2:	d01a      	beq.n	800280a <HAL_TIM_ConfigClockSource+0xa6>
 80027d4:	2b70      	cmp	r3, #112	@ 0x70
 80027d6:	d87b      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b60      	cmp	r3, #96	@ 0x60
 80027da:	d050      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x11a>
 80027dc:	2b60      	cmp	r3, #96	@ 0x60
 80027de:	d877      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b50      	cmp	r3, #80	@ 0x50
 80027e2:	d03c      	beq.n	800285e <HAL_TIM_ConfigClockSource+0xfa>
 80027e4:	2b50      	cmp	r3, #80	@ 0x50
 80027e6:	d873      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e8:	2b40      	cmp	r3, #64	@ 0x40
 80027ea:	d058      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x13a>
 80027ec:	2b40      	cmp	r3, #64	@ 0x40
 80027ee:	d86f      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b30      	cmp	r3, #48	@ 0x30
 80027f2:	d064      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x15a>
 80027f4:	2b30      	cmp	r3, #48	@ 0x30
 80027f6:	d86b      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d060      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x15a>
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d867      	bhi.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d05c      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x15a>
 8002804:	2b10      	cmp	r3, #16
 8002806:	d05a      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x15a>
 8002808:	e062      	b.n	80028d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800281a:	f000 fb1f 	bl	8002e5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800282c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	609a      	str	r2, [r3, #8]
      break;
 8002836:	e04f      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002848:	f000 fb08 	bl	8002e5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800285a:	609a      	str	r2, [r3, #8]
      break;
 800285c:	e03c      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286a:	461a      	mov	r2, r3
 800286c:	f000 fa7c 	bl	8002d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2150      	movs	r1, #80	@ 0x50
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fad5 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 800287c:	e02c      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800288a:	461a      	mov	r2, r3
 800288c:	f000 fa9b 	bl	8002dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2160      	movs	r1, #96	@ 0x60
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fac5 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 800289c:	e01c      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028aa:	461a      	mov	r2, r3
 80028ac:	f000 fa5c 	bl	8002d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2140      	movs	r1, #64	@ 0x40
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fab5 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 80028bc:	e00c      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f000 faac 	bl	8002e26 <TIM_ITRx_SetConfig>
      break;
 80028ce:	e003      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      break;
 80028d4:	e000      	b.n	80028d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a37      	ldr	r2, [pc, #220]	@ (8002a34 <TIM_Base_SetConfig+0xf0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00f      	beq.n	800297c <TIM_Base_SetConfig+0x38>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002962:	d00b      	beq.n	800297c <TIM_Base_SetConfig+0x38>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a34      	ldr	r2, [pc, #208]	@ (8002a38 <TIM_Base_SetConfig+0xf4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <TIM_Base_SetConfig+0x38>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a33      	ldr	r2, [pc, #204]	@ (8002a3c <TIM_Base_SetConfig+0xf8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_Base_SetConfig+0x38>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a32      	ldr	r2, [pc, #200]	@ (8002a40 <TIM_Base_SetConfig+0xfc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a28      	ldr	r2, [pc, #160]	@ (8002a34 <TIM_Base_SetConfig+0xf0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01b      	beq.n	80029ce <TIM_Base_SetConfig+0x8a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800299c:	d017      	beq.n	80029ce <TIM_Base_SetConfig+0x8a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a25      	ldr	r2, [pc, #148]	@ (8002a38 <TIM_Base_SetConfig+0xf4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <TIM_Base_SetConfig+0x8a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a24      	ldr	r2, [pc, #144]	@ (8002a3c <TIM_Base_SetConfig+0xf8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00f      	beq.n	80029ce <TIM_Base_SetConfig+0x8a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a23      	ldr	r2, [pc, #140]	@ (8002a40 <TIM_Base_SetConfig+0xfc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d00b      	beq.n	80029ce <TIM_Base_SetConfig+0x8a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a22      	ldr	r2, [pc, #136]	@ (8002a44 <TIM_Base_SetConfig+0x100>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <TIM_Base_SetConfig+0x8a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a21      	ldr	r2, [pc, #132]	@ (8002a48 <TIM_Base_SetConfig+0x104>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d003      	beq.n	80029ce <TIM_Base_SetConfig+0x8a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a20      	ldr	r2, [pc, #128]	@ (8002a4c <TIM_Base_SetConfig+0x108>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d108      	bne.n	80029e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a0c      	ldr	r2, [pc, #48]	@ (8002a34 <TIM_Base_SetConfig+0xf0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d103      	bne.n	8002a0e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	601a      	str	r2, [r3, #0]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000800 	.word	0x40000800
 8002a40:	40000c00 	.word	0x40000c00
 8002a44:	40014000 	.word	0x40014000
 8002a48:	40014400 	.word	0x40014400
 8002a4c:	40014800 	.word	0x40014800

08002a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f023 0201 	bic.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0303 	bic.w	r3, r3, #3
 8002a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f023 0302 	bic.w	r3, r3, #2
 8002a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b18 <TIM_OC1_SetConfig+0xc8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d10c      	bne.n	8002ac6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f023 0308 	bic.w	r3, r3, #8
 8002ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f023 0304 	bic.w	r3, r3, #4
 8002ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	@ (8002b18 <TIM_OC1_SetConfig+0xc8>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d111      	bne.n	8002af2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	621a      	str	r2, [r3, #32]
}
 8002b0c:	bf00      	nop
 8002b0e:	371c      	adds	r7, #28
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	40010000 	.word	0x40010000

08002b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	f023 0210 	bic.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	021b      	lsls	r3, r3, #8
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f023 0320 	bic.w	r3, r3, #32
 8002b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf0 <TIM_OC2_SetConfig+0xd4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10d      	bne.n	8002b98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a15      	ldr	r2, [pc, #84]	@ (8002bf0 <TIM_OC2_SetConfig+0xd4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d113      	bne.n	8002bc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	621a      	str	r2, [r3, #32]
}
 8002be2:	bf00      	nop
 8002be4:	371c      	adds	r7, #28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40010000 	.word	0x40010000

08002bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc4 <TIM_OC3_SetConfig+0xd0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10d      	bne.n	8002c6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	021b      	lsls	r3, r3, #8
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a14      	ldr	r2, [pc, #80]	@ (8002cc4 <TIM_OC3_SetConfig+0xd0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d113      	bne.n	8002c9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	621a      	str	r2, [r3, #32]
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40010000 	.word	0x40010000

08002cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	021b      	lsls	r3, r3, #8
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	031b      	lsls	r3, r3, #12
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a10      	ldr	r2, [pc, #64]	@ (8002d64 <TIM_OC4_SetConfig+0x9c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d109      	bne.n	8002d3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	621a      	str	r2, [r3, #32]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40010000 	.word	0x40010000

08002d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b087      	sub	sp, #28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f023 0201 	bic.w	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f023 030a 	bic.w	r3, r3, #10
 8002da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	621a      	str	r2, [r3, #32]
}
 8002dba:	bf00      	nop
 8002dbc:	371c      	adds	r7, #28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b087      	sub	sp, #28
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f023 0210 	bic.w	r2, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002df0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	031b      	lsls	r3, r3, #12
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	621a      	str	r2, [r3, #32]
}
 8002e1a:	bf00      	nop
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b085      	sub	sp, #20
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f043 0307 	orr.w	r3, r3, #7
 8002e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	609a      	str	r2, [r3, #8]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	021a      	lsls	r2, r3, #8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	609a      	str	r2, [r3, #8]
}
 8002e90:	bf00      	nop
 8002e92:	371c      	adds	r7, #28
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2201      	movs	r2, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a1a      	ldr	r2, [r3, #32]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	bf00      	nop
 8002edc:	371c      	adds	r7, #28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d101      	bne.n	8002f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e050      	b.n	8002fa2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d018      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f4c:	d013      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a18      	ldr	r2, [pc, #96]	@ (8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d00e      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a16      	ldr	r2, [pc, #88]	@ (8002fb8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a15      	ldr	r2, [pc, #84]	@ (8002fbc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d004      	beq.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a13      	ldr	r2, [pc, #76]	@ (8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10c      	bne.n	8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40000400 	.word	0x40000400
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40000c00 	.word	0x40000c00
 8002fc0:	40014000 	.word	0x40014000

08002fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e042      	b.n	8003084 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fd fe6e 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2224      	movs	r2, #36	@ 0x24
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800302e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fcef 	bl	8003a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003044:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003054:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003064:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	4613      	mov	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d112      	bne.n	80030cc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_UART_Receive_IT+0x26>
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e00b      	b.n	80030ce <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030bc:	88fb      	ldrh	r3, [r7, #6]
 80030be:	461a      	mov	r2, r3
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 fad2 	bl	800366c <UART_Start_Receive_IT>
 80030c8:	4603      	mov	r3, r0
 80030ca:	e000      	b.n	80030ce <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030cc:	2302      	movs	r3, #2
  }
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b0ba      	sub	sp, #232	@ 0xe8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800310a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_UART_IRQHandler+0x66>
 800312a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fbae 	bl	8003898 <UART_Receive_IT>
      return;
 800313c:	e273      	b.n	8003626 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800313e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80de 	beq.w	8003304 <HAL_UART_IRQHandler+0x22c>
 8003148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003158:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80d1 	beq.w	8003304 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_UART_IRQHandler+0xae>
 800316e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_UART_IRQHandler+0xd2>
 8003192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f043 0202 	orr.w	r2, r3, #2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_UART_IRQHandler+0xf6>
 80031b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d011      	beq.n	80031fe <HAL_UART_IRQHandler+0x126>
 80031da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	f043 0208 	orr.w	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 820a 	beq.w	800361c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_UART_IRQHandler+0x14e>
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fb39 	bl	8003898 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003230:	2b40      	cmp	r3, #64	@ 0x40
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <HAL_UART_IRQHandler+0x17a>
 800324a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04f      	beq.n	80032f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fa44 	bl	80036e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003262:	2b40      	cmp	r3, #64	@ 0x40
 8003264:	d141      	bne.n	80032ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3314      	adds	r3, #20
 800326c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800327c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003284:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3314      	adds	r3, #20
 800328e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003292:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003296:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800329e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1d9      	bne.n	8003266 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d013      	beq.n	80032e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032be:	4a8a      	ldr	r2, [pc, #552]	@ (80034e8 <HAL_UART_IRQHandler+0x410>)
 80032c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe f885 	bl	80013d6 <HAL_DMA_Abort_IT>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80032dc:	4610      	mov	r0, r2
 80032de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e00e      	b.n	8003300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f9ac 	bl	8003640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	e00a      	b.n	8003300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f9a8 	bl	8003640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	e006      	b.n	8003300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f9a4 	bl	8003640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80032fe:	e18d      	b.n	800361c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	bf00      	nop
    return;
 8003302:	e18b      	b.n	800361c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003308:	2b01      	cmp	r3, #1
 800330a:	f040 8167 	bne.w	80035dc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800330e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8160 	beq.w	80035dc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8159 	beq.w	80035dc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	2b40      	cmp	r3, #64	@ 0x40
 800334c:	f040 80ce 	bne.w	80034ec <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800335c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a9 	beq.w	80034b8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800336a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800336e:	429a      	cmp	r2, r3
 8003370:	f080 80a2 	bcs.w	80034b8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800337a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003386:	f000 8088 	beq.w	800349a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	330c      	adds	r3, #12
 8003390:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1d9      	bne.n	800338a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3314      	adds	r3, #20
 80033dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80033e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	3314      	adds	r3, #20
 80033f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80033fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003402:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800340c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e1      	bne.n	80033d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3314      	adds	r3, #20
 8003418:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003424:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3314      	adds	r3, #20
 8003432:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003436:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003438:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800343c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003444:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1e3      	bne.n	8003412 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	330c      	adds	r3, #12
 800345e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003468:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800346a:	f023 0310 	bic.w	r3, r3, #16
 800346e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	330c      	adds	r3, #12
 8003478:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800347c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800347e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003482:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800348a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e3      	bne.n	8003458 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd ff2e 	bl	80012f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2202      	movs	r2, #2
 800349e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	4619      	mov	r1, r3
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f8cf 	bl	8003654 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80034b6:	e0b3      	b.n	8003620 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034c0:	429a      	cmp	r2, r3
 80034c2:	f040 80ad 	bne.w	8003620 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d0:	f040 80a6 	bne.w	8003620 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034de:	4619      	mov	r1, r3
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 f8b7 	bl	8003654 <HAL_UARTEx_RxEventCallback>
      return;
 80034e6:	e09b      	b.n	8003620 <HAL_UART_IRQHandler+0x548>
 80034e8:	080037a7 	.word	0x080037a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003500:	b29b      	uxth	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 808e 	beq.w	8003624 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003508:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8089 	beq.w	8003624 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
 8003518:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003528:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	330c      	adds	r3, #12
 8003532:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003536:	647a      	str	r2, [r7, #68]	@ 0x44
 8003538:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800353c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e3      	bne.n	8003512 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3314      	adds	r3, #20
 8003550:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	623b      	str	r3, [r7, #32]
   return(result);
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3314      	adds	r3, #20
 800356a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800356e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003574:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003576:	e841 2300 	strex	r3, r2, [r1]
 800357a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1e3      	bne.n	800354a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	60fb      	str	r3, [r7, #12]
   return(result);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0310 	bic.w	r3, r3, #16
 80035a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	330c      	adds	r3, #12
 80035b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035b4:	61fa      	str	r2, [r7, #28]
 80035b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	69b9      	ldr	r1, [r7, #24]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	617b      	str	r3, [r7, #20]
   return(result);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e3      	bne.n	8003590 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035d2:	4619      	mov	r1, r3
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f83d 	bl	8003654 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035da:	e023      	b.n	8003624 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d009      	beq.n	80035fc <HAL_UART_IRQHandler+0x524>
 80035e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f8e7 	bl	80037c8 <UART_Transmit_IT>
    return;
 80035fa:	e014      	b.n	8003626 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00e      	beq.n	8003626 <HAL_UART_IRQHandler+0x54e>
 8003608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800360c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d008      	beq.n	8003626 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f927 	bl	8003868 <UART_EndTransmit_IT>
    return;
 800361a:	e004      	b.n	8003626 <HAL_UART_IRQHandler+0x54e>
    return;
 800361c:	bf00      	nop
 800361e:	e002      	b.n	8003626 <HAL_UART_IRQHandler+0x54e>
      return;
 8003620:	bf00      	nop
 8003622:	e000      	b.n	8003626 <HAL_UART_IRQHandler+0x54e>
      return;
 8003624:	bf00      	nop
  }
}
 8003626:	37e8      	adds	r7, #232	@ 0xe8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	4613      	mov	r3, r2
 8003678:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2222      	movs	r2, #34	@ 0x22
 8003696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0220 	orr.w	r2, r2, #32
 80036d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b095      	sub	sp, #84	@ 0x54
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	e853 3f00 	ldrex	r3, [r3]
 80036f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	330c      	adds	r3, #12
 8003706:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003708:	643a      	str	r2, [r7, #64]	@ 0x40
 800370a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800370e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003710:	e841 2300 	strex	r3, r2, [r1]
 8003714:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1e5      	bne.n	80036e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3314      	adds	r3, #20
 8003722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	61fb      	str	r3, [r7, #28]
   return(result);
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3314      	adds	r3, #20
 800373a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800373c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800373e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e5      	bne.n	800371c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	2b01      	cmp	r3, #1
 8003756:	d119      	bne.n	800378c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	60bb      	str	r3, [r7, #8]
   return(result);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f023 0310 	bic.w	r3, r3, #16
 800376e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003778:	61ba      	str	r2, [r7, #24]
 800377a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6979      	ldr	r1, [r7, #20]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	613b      	str	r3, [r7, #16]
   return(result);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e5      	bne.n	8003758 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800379a:	bf00      	nop
 800379c:	3754      	adds	r7, #84	@ 0x54
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f7ff ff40 	bl	8003640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b21      	cmp	r3, #33	@ 0x21
 80037da:	d13e      	bne.n	800385a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e4:	d114      	bne.n	8003810 <UART_Transmit_IT+0x48>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d110      	bne.n	8003810 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003802:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	1c9a      	adds	r2, r3, #2
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	621a      	str	r2, [r3, #32]
 800380e:	e008      	b.n	8003822 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	1c59      	adds	r1, r3, #1
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6211      	str	r1, [r2, #32]
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29b      	uxth	r3, r3
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4619      	mov	r1, r3
 8003830:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10f      	bne.n	8003856 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003844:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003854:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
  }
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68da      	ldr	r2, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff fecf 	bl	800362c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08c      	sub	sp, #48	@ 0x30
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b22      	cmp	r3, #34	@ 0x22
 80038b2:	f040 80aa 	bne.w	8003a0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038be:	d115      	bne.n	80038ec <UART_Receive_IT+0x54>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d111      	bne.n	80038ec <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038da:	b29a      	uxth	r2, r3
 80038dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e4:	1c9a      	adds	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80038ea:	e024      	b.n	8003936 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038fa:	d007      	beq.n	800390c <UART_Receive_IT+0x74>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <UART_Receive_IT+0x82>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d106      	bne.n	800391a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	e008      	b.n	800392c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	b2db      	uxtb	r3, r3
 8003922:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003926:	b2da      	uxtb	r2, r3
 8003928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29b      	uxth	r3, r3
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4619      	mov	r1, r3
 8003944:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003946:	2b00      	cmp	r3, #0
 8003948:	d15d      	bne.n	8003a06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0220 	bic.w	r2, r2, #32
 8003958:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003968:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0201 	bic.w	r2, r2, #1
 8003978:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	2b01      	cmp	r3, #1
 800398e:	d135      	bne.n	80039fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	613b      	str	r3, [r7, #16]
   return(result);
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f023 0310 	bic.w	r3, r3, #16
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b6:	623a      	str	r2, [r7, #32]
 80039b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	69f9      	ldr	r1, [r7, #28]
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e5      	bne.n	8003996 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d10a      	bne.n	80039ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039f2:	4619      	mov	r1, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fe2d 	bl	8003654 <HAL_UARTEx_RxEventCallback>
 80039fa:	e002      	b.n	8003a02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f7fd f845 	bl	8000a8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e002      	b.n	8003a0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e000      	b.n	8003a0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a0a:	2302      	movs	r3, #2
  }
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3730      	adds	r7, #48	@ 0x30
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a18:	b0c0      	sub	sp, #256	@ 0x100
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	68d9      	ldr	r1, [r3, #12]
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	ea40 0301 	orr.w	r3, r0, r1
 8003a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a6c:	f021 010c 	bic.w	r1, r1, #12
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8e:	6999      	ldr	r1, [r3, #24]
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	ea40 0301 	orr.w	r3, r0, r1
 8003a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b8f      	ldr	r3, [pc, #572]	@ (8003ce0 <UART_SetConfig+0x2cc>)
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d005      	beq.n	8003ab4 <UART_SetConfig+0xa0>
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b8d      	ldr	r3, [pc, #564]	@ (8003ce4 <UART_SetConfig+0x2d0>)
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d104      	bne.n	8003abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7fe fad4 	bl	8002060 <HAL_RCC_GetPCLK2Freq>
 8003ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003abc:	e003      	b.n	8003ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003abe:	f7fe fabb 	bl	8002038 <HAL_RCC_GetPCLK1Freq>
 8003ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad0:	f040 810c 	bne.w	8003cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ade:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	462b      	mov	r3, r5
 8003aea:	1891      	adds	r1, r2, r2
 8003aec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003aee:	415b      	adcs	r3, r3
 8003af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003af6:	4621      	mov	r1, r4
 8003af8:	eb12 0801 	adds.w	r8, r2, r1
 8003afc:	4629      	mov	r1, r5
 8003afe:	eb43 0901 	adc.w	r9, r3, r1
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b16:	4690      	mov	r8, r2
 8003b18:	4699      	mov	r9, r3
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	eb18 0303 	adds.w	r3, r8, r3
 8003b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b24:	462b      	mov	r3, r5
 8003b26:	eb49 0303 	adc.w	r3, r9, r3
 8003b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b42:	460b      	mov	r3, r1
 8003b44:	18db      	adds	r3, r3, r3
 8003b46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b48:	4613      	mov	r3, r2
 8003b4a:	eb42 0303 	adc.w	r3, r2, r3
 8003b4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b58:	f7fc fb3e 	bl	80001d8 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4b61      	ldr	r3, [pc, #388]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003b62:	fba3 2302 	umull	r2, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	011c      	lsls	r4, r3, #4
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	1891      	adds	r1, r2, r2
 8003b82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b84:	415b      	adcs	r3, r3
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b92:	4649      	mov	r1, r9
 8003b94:	eb43 0b01 	adc.w	fp, r3, r1
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bac:	4692      	mov	sl, r2
 8003bae:	469b      	mov	fp, r3
 8003bb0:	4643      	mov	r3, r8
 8003bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8003bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8003bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	18db      	adds	r3, r3, r3
 8003bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bde:	4613      	mov	r3, r2
 8003be0:	eb42 0303 	adc.w	r3, r2, r3
 8003be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bee:	f7fc faf3 	bl	80001d8 <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2264      	movs	r2, #100	@ 0x64
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	1acb      	subs	r3, r1, r3
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c0e:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003c10:	fba3 2302 	umull	r2, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c1c:	441c      	add	r4, r3
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c40:	4641      	mov	r1, r8
 8003c42:	1851      	adds	r1, r2, r1
 8003c44:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c46:	4649      	mov	r1, r9
 8003c48:	414b      	adcs	r3, r1
 8003c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c58:	4659      	mov	r1, fp
 8003c5a:	00cb      	lsls	r3, r1, #3
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c62:	4651      	mov	r1, sl
 8003c64:	00ca      	lsls	r2, r1, #3
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c74:	464b      	mov	r3, r9
 8003c76:	460a      	mov	r2, r1
 8003c78:	eb42 0303 	adc.w	r3, r2, r3
 8003c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c94:	460b      	mov	r3, r1
 8003c96:	18db      	adds	r3, r3, r3
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003caa:	f7fc fa95 	bl	80001d8 <__aeabi_uldivmod>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	2164      	movs	r1, #100	@ 0x64
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	3332      	adds	r3, #50	@ 0x32
 8003cc6:	4a08      	ldr	r2, [pc, #32]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	f003 0207 	and.w	r2, r3, #7
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4422      	add	r2, r4
 8003cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cdc:	e106      	b.n	8003eec <UART_SetConfig+0x4d8>
 8003cde:	bf00      	nop
 8003ce0:	40011000 	.word	0x40011000
 8003ce4:	40011400 	.word	0x40011400
 8003ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003cfe:	4642      	mov	r2, r8
 8003d00:	464b      	mov	r3, r9
 8003d02:	1891      	adds	r1, r2, r2
 8003d04:	6239      	str	r1, [r7, #32]
 8003d06:	415b      	adcs	r3, r3
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d0e:	4641      	mov	r1, r8
 8003d10:	1854      	adds	r4, r2, r1
 8003d12:	4649      	mov	r1, r9
 8003d14:	eb43 0501 	adc.w	r5, r3, r1
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	00eb      	lsls	r3, r5, #3
 8003d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d26:	00e2      	lsls	r2, r4, #3
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	18e3      	adds	r3, r4, r3
 8003d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d34:	464b      	mov	r3, r9
 8003d36:	eb45 0303 	adc.w	r3, r5, r3
 8003d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	008b      	lsls	r3, r1, #2
 8003d5e:	4621      	mov	r1, r4
 8003d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d64:	4621      	mov	r1, r4
 8003d66:	008a      	lsls	r2, r1, #2
 8003d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d6c:	f7fc fa34 	bl	80001d8 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4b60      	ldr	r3, [pc, #384]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003d76:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	011c      	lsls	r4, r3, #4
 8003d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d90:	4642      	mov	r2, r8
 8003d92:	464b      	mov	r3, r9
 8003d94:	1891      	adds	r1, r2, r2
 8003d96:	61b9      	str	r1, [r7, #24]
 8003d98:	415b      	adcs	r3, r3
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da0:	4641      	mov	r1, r8
 8003da2:	1851      	adds	r1, r2, r1
 8003da4:	6139      	str	r1, [r7, #16]
 8003da6:	4649      	mov	r1, r9
 8003da8:	414b      	adcs	r3, r1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003db8:	4659      	mov	r1, fp
 8003dba:	00cb      	lsls	r3, r1, #3
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc2:	4651      	mov	r1, sl
 8003dc4:	00ca      	lsls	r2, r1, #3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4642      	mov	r2, r8
 8003dce:	189b      	adds	r3, r3, r2
 8003dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	460a      	mov	r2, r1
 8003dd8:	eb42 0303 	adc.w	r3, r2, r3
 8003ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003df8:	4649      	mov	r1, r9
 8003dfa:	008b      	lsls	r3, r1, #2
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e02:	4641      	mov	r1, r8
 8003e04:	008a      	lsls	r2, r1, #2
 8003e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e0a:	f7fc f9e5 	bl	80001d8 <__aeabi_uldivmod>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	4b38      	ldr	r3, [pc, #224]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003e16:	fba3 2301 	umull	r2, r3, r3, r1
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	2264      	movs	r2, #100	@ 0x64
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	1acb      	subs	r3, r1, r3
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	3332      	adds	r3, #50	@ 0x32
 8003e28:	4a33      	ldr	r2, [pc, #204]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e34:	441c      	add	r4, r3
 8003e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e44:	4642      	mov	r2, r8
 8003e46:	464b      	mov	r3, r9
 8003e48:	1891      	adds	r1, r2, r2
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	415b      	adcs	r3, r3
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e54:	4641      	mov	r1, r8
 8003e56:	1851      	adds	r1, r2, r1
 8003e58:	6039      	str	r1, [r7, #0]
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	414b      	adcs	r3, r1
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e6c:	4659      	mov	r1, fp
 8003e6e:	00cb      	lsls	r3, r1, #3
 8003e70:	4651      	mov	r1, sl
 8003e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e76:	4651      	mov	r1, sl
 8003e78:	00ca      	lsls	r2, r1, #3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4642      	mov	r2, r8
 8003e82:	189b      	adds	r3, r3, r2
 8003e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e86:	464b      	mov	r3, r9
 8003e88:	460a      	mov	r2, r1
 8003e8a:	eb42 0303 	adc.w	r3, r2, r3
 8003e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	008b      	lsls	r3, r1, #2
 8003eac:	4641      	mov	r1, r8
 8003eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	008a      	lsls	r2, r1, #2
 8003eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003eba:	f7fc f98d 	bl	80001d8 <__aeabi_uldivmod>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	2164      	movs	r1, #100	@ 0x64
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	3332      	adds	r3, #50	@ 0x32
 8003ed6:	4a08      	ldr	r2, [pc, #32]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4422      	add	r2, r4
 8003eea:	609a      	str	r2, [r3, #8]
}
 8003eec:	bf00      	nop
 8003eee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef8:	51eb851f 	.word	0x51eb851f

08003efc <std>:
 8003efc:	2300      	movs	r3, #0
 8003efe:	b510      	push	{r4, lr}
 8003f00:	4604      	mov	r4, r0
 8003f02:	e9c0 3300 	strd	r3, r3, [r0]
 8003f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f0a:	6083      	str	r3, [r0, #8]
 8003f0c:	8181      	strh	r1, [r0, #12]
 8003f0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f10:	81c2      	strh	r2, [r0, #14]
 8003f12:	6183      	str	r3, [r0, #24]
 8003f14:	4619      	mov	r1, r3
 8003f16:	2208      	movs	r2, #8
 8003f18:	305c      	adds	r0, #92	@ 0x5c
 8003f1a:	f000 f9e7 	bl	80042ec <memset>
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <std+0x58>)
 8003f20:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f22:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <std+0x5c>)
 8003f24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f26:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <std+0x60>)
 8003f28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <std+0x64>)
 8003f2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <std+0x68>)
 8003f30:	6224      	str	r4, [r4, #32]
 8003f32:	429c      	cmp	r4, r3
 8003f34:	d006      	beq.n	8003f44 <std+0x48>
 8003f36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f3a:	4294      	cmp	r4, r2
 8003f3c:	d002      	beq.n	8003f44 <std+0x48>
 8003f3e:	33d0      	adds	r3, #208	@ 0xd0
 8003f40:	429c      	cmp	r4, r3
 8003f42:	d105      	bne.n	8003f50 <std+0x54>
 8003f44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f4c:	f000 ba46 	b.w	80043dc <__retarget_lock_init_recursive>
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	bf00      	nop
 8003f54:	0800413d 	.word	0x0800413d
 8003f58:	0800415f 	.word	0x0800415f
 8003f5c:	08004197 	.word	0x08004197
 8003f60:	080041bb 	.word	0x080041bb
 8003f64:	20000178 	.word	0x20000178

08003f68 <stdio_exit_handler>:
 8003f68:	4a02      	ldr	r2, [pc, #8]	@ (8003f74 <stdio_exit_handler+0xc>)
 8003f6a:	4903      	ldr	r1, [pc, #12]	@ (8003f78 <stdio_exit_handler+0x10>)
 8003f6c:	4803      	ldr	r0, [pc, #12]	@ (8003f7c <stdio_exit_handler+0x14>)
 8003f6e:	f000 b869 	b.w	8004044 <_fwalk_sglue>
 8003f72:	bf00      	nop
 8003f74:	20000014 	.word	0x20000014
 8003f78:	080046dd 	.word	0x080046dd
 8003f7c:	20000024 	.word	0x20000024

08003f80 <cleanup_stdio>:
 8003f80:	6841      	ldr	r1, [r0, #4]
 8003f82:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb4 <cleanup_stdio+0x34>)
 8003f84:	4299      	cmp	r1, r3
 8003f86:	b510      	push	{r4, lr}
 8003f88:	4604      	mov	r4, r0
 8003f8a:	d001      	beq.n	8003f90 <cleanup_stdio+0x10>
 8003f8c:	f000 fba6 	bl	80046dc <_fflush_r>
 8003f90:	68a1      	ldr	r1, [r4, #8]
 8003f92:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <cleanup_stdio+0x38>)
 8003f94:	4299      	cmp	r1, r3
 8003f96:	d002      	beq.n	8003f9e <cleanup_stdio+0x1e>
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f000 fb9f 	bl	80046dc <_fflush_r>
 8003f9e:	68e1      	ldr	r1, [r4, #12]
 8003fa0:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <cleanup_stdio+0x3c>)
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	d004      	beq.n	8003fb0 <cleanup_stdio+0x30>
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fac:	f000 bb96 	b.w	80046dc <_fflush_r>
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000178 	.word	0x20000178
 8003fb8:	200001e0 	.word	0x200001e0
 8003fbc:	20000248 	.word	0x20000248

08003fc0 <global_stdio_init.part.0>:
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <global_stdio_init.part.0+0x30>)
 8003fc4:	4c0b      	ldr	r4, [pc, #44]	@ (8003ff4 <global_stdio_init.part.0+0x34>)
 8003fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ff8 <global_stdio_init.part.0+0x38>)
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	4620      	mov	r0, r4
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2104      	movs	r1, #4
 8003fd0:	f7ff ff94 	bl	8003efc <std>
 8003fd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fd8:	2201      	movs	r2, #1
 8003fda:	2109      	movs	r1, #9
 8003fdc:	f7ff ff8e 	bl	8003efc <std>
 8003fe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fea:	2112      	movs	r1, #18
 8003fec:	f7ff bf86 	b.w	8003efc <std>
 8003ff0:	200002b0 	.word	0x200002b0
 8003ff4:	20000178 	.word	0x20000178
 8003ff8:	08003f69 	.word	0x08003f69

08003ffc <__sfp_lock_acquire>:
 8003ffc:	4801      	ldr	r0, [pc, #4]	@ (8004004 <__sfp_lock_acquire+0x8>)
 8003ffe:	f000 b9ee 	b.w	80043de <__retarget_lock_acquire_recursive>
 8004002:	bf00      	nop
 8004004:	200002b9 	.word	0x200002b9

08004008 <__sfp_lock_release>:
 8004008:	4801      	ldr	r0, [pc, #4]	@ (8004010 <__sfp_lock_release+0x8>)
 800400a:	f000 b9e9 	b.w	80043e0 <__retarget_lock_release_recursive>
 800400e:	bf00      	nop
 8004010:	200002b9 	.word	0x200002b9

08004014 <__sinit>:
 8004014:	b510      	push	{r4, lr}
 8004016:	4604      	mov	r4, r0
 8004018:	f7ff fff0 	bl	8003ffc <__sfp_lock_acquire>
 800401c:	6a23      	ldr	r3, [r4, #32]
 800401e:	b11b      	cbz	r3, 8004028 <__sinit+0x14>
 8004020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004024:	f7ff bff0 	b.w	8004008 <__sfp_lock_release>
 8004028:	4b04      	ldr	r3, [pc, #16]	@ (800403c <__sinit+0x28>)
 800402a:	6223      	str	r3, [r4, #32]
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <__sinit+0x2c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f5      	bne.n	8004020 <__sinit+0xc>
 8004034:	f7ff ffc4 	bl	8003fc0 <global_stdio_init.part.0>
 8004038:	e7f2      	b.n	8004020 <__sinit+0xc>
 800403a:	bf00      	nop
 800403c:	08003f81 	.word	0x08003f81
 8004040:	200002b0 	.word	0x200002b0

08004044 <_fwalk_sglue>:
 8004044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004048:	4607      	mov	r7, r0
 800404a:	4688      	mov	r8, r1
 800404c:	4614      	mov	r4, r2
 800404e:	2600      	movs	r6, #0
 8004050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004054:	f1b9 0901 	subs.w	r9, r9, #1
 8004058:	d505      	bpl.n	8004066 <_fwalk_sglue+0x22>
 800405a:	6824      	ldr	r4, [r4, #0]
 800405c:	2c00      	cmp	r4, #0
 800405e:	d1f7      	bne.n	8004050 <_fwalk_sglue+0xc>
 8004060:	4630      	mov	r0, r6
 8004062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004066:	89ab      	ldrh	r3, [r5, #12]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d907      	bls.n	800407c <_fwalk_sglue+0x38>
 800406c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004070:	3301      	adds	r3, #1
 8004072:	d003      	beq.n	800407c <_fwalk_sglue+0x38>
 8004074:	4629      	mov	r1, r5
 8004076:	4638      	mov	r0, r7
 8004078:	47c0      	blx	r8
 800407a:	4306      	orrs	r6, r0
 800407c:	3568      	adds	r5, #104	@ 0x68
 800407e:	e7e9      	b.n	8004054 <_fwalk_sglue+0x10>

08004080 <_puts_r>:
 8004080:	6a03      	ldr	r3, [r0, #32]
 8004082:	b570      	push	{r4, r5, r6, lr}
 8004084:	6884      	ldr	r4, [r0, #8]
 8004086:	4605      	mov	r5, r0
 8004088:	460e      	mov	r6, r1
 800408a:	b90b      	cbnz	r3, 8004090 <_puts_r+0x10>
 800408c:	f7ff ffc2 	bl	8004014 <__sinit>
 8004090:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004092:	07db      	lsls	r3, r3, #31
 8004094:	d405      	bmi.n	80040a2 <_puts_r+0x22>
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	0598      	lsls	r0, r3, #22
 800409a:	d402      	bmi.n	80040a2 <_puts_r+0x22>
 800409c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800409e:	f000 f99e 	bl	80043de <__retarget_lock_acquire_recursive>
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	0719      	lsls	r1, r3, #28
 80040a6:	d502      	bpl.n	80040ae <_puts_r+0x2e>
 80040a8:	6923      	ldr	r3, [r4, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d135      	bne.n	800411a <_puts_r+0x9a>
 80040ae:	4621      	mov	r1, r4
 80040b0:	4628      	mov	r0, r5
 80040b2:	f000 f8c5 	bl	8004240 <__swsetup_r>
 80040b6:	b380      	cbz	r0, 800411a <_puts_r+0x9a>
 80040b8:	f04f 35ff 	mov.w	r5, #4294967295
 80040bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80040be:	07da      	lsls	r2, r3, #31
 80040c0:	d405      	bmi.n	80040ce <_puts_r+0x4e>
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	059b      	lsls	r3, r3, #22
 80040c6:	d402      	bmi.n	80040ce <_puts_r+0x4e>
 80040c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040ca:	f000 f989 	bl	80043e0 <__retarget_lock_release_recursive>
 80040ce:	4628      	mov	r0, r5
 80040d0:	bd70      	pop	{r4, r5, r6, pc}
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	da04      	bge.n	80040e0 <_puts_r+0x60>
 80040d6:	69a2      	ldr	r2, [r4, #24]
 80040d8:	429a      	cmp	r2, r3
 80040da:	dc17      	bgt.n	800410c <_puts_r+0x8c>
 80040dc:	290a      	cmp	r1, #10
 80040de:	d015      	beq.n	800410c <_puts_r+0x8c>
 80040e0:	6823      	ldr	r3, [r4, #0]
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	6022      	str	r2, [r4, #0]
 80040e6:	7019      	strb	r1, [r3, #0]
 80040e8:	68a3      	ldr	r3, [r4, #8]
 80040ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ee:	3b01      	subs	r3, #1
 80040f0:	60a3      	str	r3, [r4, #8]
 80040f2:	2900      	cmp	r1, #0
 80040f4:	d1ed      	bne.n	80040d2 <_puts_r+0x52>
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da11      	bge.n	800411e <_puts_r+0x9e>
 80040fa:	4622      	mov	r2, r4
 80040fc:	210a      	movs	r1, #10
 80040fe:	4628      	mov	r0, r5
 8004100:	f000 f85f 	bl	80041c2 <__swbuf_r>
 8004104:	3001      	adds	r0, #1
 8004106:	d0d7      	beq.n	80040b8 <_puts_r+0x38>
 8004108:	250a      	movs	r5, #10
 800410a:	e7d7      	b.n	80040bc <_puts_r+0x3c>
 800410c:	4622      	mov	r2, r4
 800410e:	4628      	mov	r0, r5
 8004110:	f000 f857 	bl	80041c2 <__swbuf_r>
 8004114:	3001      	adds	r0, #1
 8004116:	d1e7      	bne.n	80040e8 <_puts_r+0x68>
 8004118:	e7ce      	b.n	80040b8 <_puts_r+0x38>
 800411a:	3e01      	subs	r6, #1
 800411c:	e7e4      	b.n	80040e8 <_puts_r+0x68>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	6022      	str	r2, [r4, #0]
 8004124:	220a      	movs	r2, #10
 8004126:	701a      	strb	r2, [r3, #0]
 8004128:	e7ee      	b.n	8004108 <_puts_r+0x88>
	...

0800412c <puts>:
 800412c:	4b02      	ldr	r3, [pc, #8]	@ (8004138 <puts+0xc>)
 800412e:	4601      	mov	r1, r0
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	f7ff bfa5 	b.w	8004080 <_puts_r>
 8004136:	bf00      	nop
 8004138:	20000020 	.word	0x20000020

0800413c <__sread>:
 800413c:	b510      	push	{r4, lr}
 800413e:	460c      	mov	r4, r1
 8004140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004144:	f000 f8fc 	bl	8004340 <_read_r>
 8004148:	2800      	cmp	r0, #0
 800414a:	bfab      	itete	ge
 800414c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800414e:	89a3      	ldrhlt	r3, [r4, #12]
 8004150:	181b      	addge	r3, r3, r0
 8004152:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004156:	bfac      	ite	ge
 8004158:	6563      	strge	r3, [r4, #84]	@ 0x54
 800415a:	81a3      	strhlt	r3, [r4, #12]
 800415c:	bd10      	pop	{r4, pc}

0800415e <__swrite>:
 800415e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004162:	461f      	mov	r7, r3
 8004164:	898b      	ldrh	r3, [r1, #12]
 8004166:	05db      	lsls	r3, r3, #23
 8004168:	4605      	mov	r5, r0
 800416a:	460c      	mov	r4, r1
 800416c:	4616      	mov	r6, r2
 800416e:	d505      	bpl.n	800417c <__swrite+0x1e>
 8004170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004174:	2302      	movs	r3, #2
 8004176:	2200      	movs	r2, #0
 8004178:	f000 f8d0 	bl	800431c <_lseek_r>
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	4632      	mov	r2, r6
 800418a:	463b      	mov	r3, r7
 800418c:	4628      	mov	r0, r5
 800418e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004192:	f000 b8e7 	b.w	8004364 <_write_r>

08004196 <__sseek>:
 8004196:	b510      	push	{r4, lr}
 8004198:	460c      	mov	r4, r1
 800419a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419e:	f000 f8bd 	bl	800431c <_lseek_r>
 80041a2:	1c43      	adds	r3, r0, #1
 80041a4:	89a3      	ldrh	r3, [r4, #12]
 80041a6:	bf15      	itete	ne
 80041a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041b2:	81a3      	strheq	r3, [r4, #12]
 80041b4:	bf18      	it	ne
 80041b6:	81a3      	strhne	r3, [r4, #12]
 80041b8:	bd10      	pop	{r4, pc}

080041ba <__sclose>:
 80041ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041be:	f000 b89d 	b.w	80042fc <_close_r>

080041c2 <__swbuf_r>:
 80041c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c4:	460e      	mov	r6, r1
 80041c6:	4614      	mov	r4, r2
 80041c8:	4605      	mov	r5, r0
 80041ca:	b118      	cbz	r0, 80041d4 <__swbuf_r+0x12>
 80041cc:	6a03      	ldr	r3, [r0, #32]
 80041ce:	b90b      	cbnz	r3, 80041d4 <__swbuf_r+0x12>
 80041d0:	f7ff ff20 	bl	8004014 <__sinit>
 80041d4:	69a3      	ldr	r3, [r4, #24]
 80041d6:	60a3      	str	r3, [r4, #8]
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	071a      	lsls	r2, r3, #28
 80041dc:	d501      	bpl.n	80041e2 <__swbuf_r+0x20>
 80041de:	6923      	ldr	r3, [r4, #16]
 80041e0:	b943      	cbnz	r3, 80041f4 <__swbuf_r+0x32>
 80041e2:	4621      	mov	r1, r4
 80041e4:	4628      	mov	r0, r5
 80041e6:	f000 f82b 	bl	8004240 <__swsetup_r>
 80041ea:	b118      	cbz	r0, 80041f4 <__swbuf_r+0x32>
 80041ec:	f04f 37ff 	mov.w	r7, #4294967295
 80041f0:	4638      	mov	r0, r7
 80041f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	6922      	ldr	r2, [r4, #16]
 80041f8:	1a98      	subs	r0, r3, r2
 80041fa:	6963      	ldr	r3, [r4, #20]
 80041fc:	b2f6      	uxtb	r6, r6
 80041fe:	4283      	cmp	r3, r0
 8004200:	4637      	mov	r7, r6
 8004202:	dc05      	bgt.n	8004210 <__swbuf_r+0x4e>
 8004204:	4621      	mov	r1, r4
 8004206:	4628      	mov	r0, r5
 8004208:	f000 fa68 	bl	80046dc <_fflush_r>
 800420c:	2800      	cmp	r0, #0
 800420e:	d1ed      	bne.n	80041ec <__swbuf_r+0x2a>
 8004210:	68a3      	ldr	r3, [r4, #8]
 8004212:	3b01      	subs	r3, #1
 8004214:	60a3      	str	r3, [r4, #8]
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	6022      	str	r2, [r4, #0]
 800421c:	701e      	strb	r6, [r3, #0]
 800421e:	6962      	ldr	r2, [r4, #20]
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	429a      	cmp	r2, r3
 8004224:	d004      	beq.n	8004230 <__swbuf_r+0x6e>
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	07db      	lsls	r3, r3, #31
 800422a:	d5e1      	bpl.n	80041f0 <__swbuf_r+0x2e>
 800422c:	2e0a      	cmp	r6, #10
 800422e:	d1df      	bne.n	80041f0 <__swbuf_r+0x2e>
 8004230:	4621      	mov	r1, r4
 8004232:	4628      	mov	r0, r5
 8004234:	f000 fa52 	bl	80046dc <_fflush_r>
 8004238:	2800      	cmp	r0, #0
 800423a:	d0d9      	beq.n	80041f0 <__swbuf_r+0x2e>
 800423c:	e7d6      	b.n	80041ec <__swbuf_r+0x2a>
	...

08004240 <__swsetup_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4b29      	ldr	r3, [pc, #164]	@ (80042e8 <__swsetup_r+0xa8>)
 8004244:	4605      	mov	r5, r0
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	460c      	mov	r4, r1
 800424a:	b118      	cbz	r0, 8004254 <__swsetup_r+0x14>
 800424c:	6a03      	ldr	r3, [r0, #32]
 800424e:	b90b      	cbnz	r3, 8004254 <__swsetup_r+0x14>
 8004250:	f7ff fee0 	bl	8004014 <__sinit>
 8004254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004258:	0719      	lsls	r1, r3, #28
 800425a:	d422      	bmi.n	80042a2 <__swsetup_r+0x62>
 800425c:	06da      	lsls	r2, r3, #27
 800425e:	d407      	bmi.n	8004270 <__swsetup_r+0x30>
 8004260:	2209      	movs	r2, #9
 8004262:	602a      	str	r2, [r5, #0]
 8004264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	f04f 30ff 	mov.w	r0, #4294967295
 800426e:	e033      	b.n	80042d8 <__swsetup_r+0x98>
 8004270:	0758      	lsls	r0, r3, #29
 8004272:	d512      	bpl.n	800429a <__swsetup_r+0x5a>
 8004274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004276:	b141      	cbz	r1, 800428a <__swsetup_r+0x4a>
 8004278:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800427c:	4299      	cmp	r1, r3
 800427e:	d002      	beq.n	8004286 <__swsetup_r+0x46>
 8004280:	4628      	mov	r0, r5
 8004282:	f000 f8af 	bl	80043e4 <_free_r>
 8004286:	2300      	movs	r3, #0
 8004288:	6363      	str	r3, [r4, #52]	@ 0x34
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004290:	81a3      	strh	r3, [r4, #12]
 8004292:	2300      	movs	r3, #0
 8004294:	6063      	str	r3, [r4, #4]
 8004296:	6923      	ldr	r3, [r4, #16]
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	f043 0308 	orr.w	r3, r3, #8
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	6923      	ldr	r3, [r4, #16]
 80042a4:	b94b      	cbnz	r3, 80042ba <__swsetup_r+0x7a>
 80042a6:	89a3      	ldrh	r3, [r4, #12]
 80042a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b0:	d003      	beq.n	80042ba <__swsetup_r+0x7a>
 80042b2:	4621      	mov	r1, r4
 80042b4:	4628      	mov	r0, r5
 80042b6:	f000 fa5f 	bl	8004778 <__smakebuf_r>
 80042ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042be:	f013 0201 	ands.w	r2, r3, #1
 80042c2:	d00a      	beq.n	80042da <__swsetup_r+0x9a>
 80042c4:	2200      	movs	r2, #0
 80042c6:	60a2      	str	r2, [r4, #8]
 80042c8:	6962      	ldr	r2, [r4, #20]
 80042ca:	4252      	negs	r2, r2
 80042cc:	61a2      	str	r2, [r4, #24]
 80042ce:	6922      	ldr	r2, [r4, #16]
 80042d0:	b942      	cbnz	r2, 80042e4 <__swsetup_r+0xa4>
 80042d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042d6:	d1c5      	bne.n	8004264 <__swsetup_r+0x24>
 80042d8:	bd38      	pop	{r3, r4, r5, pc}
 80042da:	0799      	lsls	r1, r3, #30
 80042dc:	bf58      	it	pl
 80042de:	6962      	ldrpl	r2, [r4, #20]
 80042e0:	60a2      	str	r2, [r4, #8]
 80042e2:	e7f4      	b.n	80042ce <__swsetup_r+0x8e>
 80042e4:	2000      	movs	r0, #0
 80042e6:	e7f7      	b.n	80042d8 <__swsetup_r+0x98>
 80042e8:	20000020 	.word	0x20000020

080042ec <memset>:
 80042ec:	4402      	add	r2, r0
 80042ee:	4603      	mov	r3, r0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d100      	bne.n	80042f6 <memset+0xa>
 80042f4:	4770      	bx	lr
 80042f6:	f803 1b01 	strb.w	r1, [r3], #1
 80042fa:	e7f9      	b.n	80042f0 <memset+0x4>

080042fc <_close_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4d06      	ldr	r5, [pc, #24]	@ (8004318 <_close_r+0x1c>)
 8004300:	2300      	movs	r3, #0
 8004302:	4604      	mov	r4, r0
 8004304:	4608      	mov	r0, r1
 8004306:	602b      	str	r3, [r5, #0]
 8004308:	f7fc fdcb 	bl	8000ea2 <_close>
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d102      	bne.n	8004316 <_close_r+0x1a>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	b103      	cbz	r3, 8004316 <_close_r+0x1a>
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	bd38      	pop	{r3, r4, r5, pc}
 8004318:	200002b4 	.word	0x200002b4

0800431c <_lseek_r>:
 800431c:	b538      	push	{r3, r4, r5, lr}
 800431e:	4d07      	ldr	r5, [pc, #28]	@ (800433c <_lseek_r+0x20>)
 8004320:	4604      	mov	r4, r0
 8004322:	4608      	mov	r0, r1
 8004324:	4611      	mov	r1, r2
 8004326:	2200      	movs	r2, #0
 8004328:	602a      	str	r2, [r5, #0]
 800432a:	461a      	mov	r2, r3
 800432c:	f7fc fde0 	bl	8000ef0 <_lseek>
 8004330:	1c43      	adds	r3, r0, #1
 8004332:	d102      	bne.n	800433a <_lseek_r+0x1e>
 8004334:	682b      	ldr	r3, [r5, #0]
 8004336:	b103      	cbz	r3, 800433a <_lseek_r+0x1e>
 8004338:	6023      	str	r3, [r4, #0]
 800433a:	bd38      	pop	{r3, r4, r5, pc}
 800433c:	200002b4 	.word	0x200002b4

08004340 <_read_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4d07      	ldr	r5, [pc, #28]	@ (8004360 <_read_r+0x20>)
 8004344:	4604      	mov	r4, r0
 8004346:	4608      	mov	r0, r1
 8004348:	4611      	mov	r1, r2
 800434a:	2200      	movs	r2, #0
 800434c:	602a      	str	r2, [r5, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	f7fc fd6e 	bl	8000e30 <_read>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_read_r+0x1e>
 8004358:	682b      	ldr	r3, [r5, #0]
 800435a:	b103      	cbz	r3, 800435e <_read_r+0x1e>
 800435c:	6023      	str	r3, [r4, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	200002b4 	.word	0x200002b4

08004364 <_write_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4d07      	ldr	r5, [pc, #28]	@ (8004384 <_write_r+0x20>)
 8004368:	4604      	mov	r4, r0
 800436a:	4608      	mov	r0, r1
 800436c:	4611      	mov	r1, r2
 800436e:	2200      	movs	r2, #0
 8004370:	602a      	str	r2, [r5, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	f7fc fd79 	bl	8000e6a <_write>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d102      	bne.n	8004382 <_write_r+0x1e>
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	b103      	cbz	r3, 8004382 <_write_r+0x1e>
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	200002b4 	.word	0x200002b4

08004388 <__errno>:
 8004388:	4b01      	ldr	r3, [pc, #4]	@ (8004390 <__errno+0x8>)
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	20000020 	.word	0x20000020

08004394 <__libc_init_array>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	4d0d      	ldr	r5, [pc, #52]	@ (80043cc <__libc_init_array+0x38>)
 8004398:	4c0d      	ldr	r4, [pc, #52]	@ (80043d0 <__libc_init_array+0x3c>)
 800439a:	1b64      	subs	r4, r4, r5
 800439c:	10a4      	asrs	r4, r4, #2
 800439e:	2600      	movs	r6, #0
 80043a0:	42a6      	cmp	r6, r4
 80043a2:	d109      	bne.n	80043b8 <__libc_init_array+0x24>
 80043a4:	4d0b      	ldr	r5, [pc, #44]	@ (80043d4 <__libc_init_array+0x40>)
 80043a6:	4c0c      	ldr	r4, [pc, #48]	@ (80043d8 <__libc_init_array+0x44>)
 80043a8:	f000 fa54 	bl	8004854 <_init>
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	2600      	movs	r6, #0
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d105      	bne.n	80043c2 <__libc_init_array+0x2e>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043bc:	4798      	blx	r3
 80043be:	3601      	adds	r6, #1
 80043c0:	e7ee      	b.n	80043a0 <__libc_init_array+0xc>
 80043c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043c6:	4798      	blx	r3
 80043c8:	3601      	adds	r6, #1
 80043ca:	e7f2      	b.n	80043b2 <__libc_init_array+0x1e>
 80043cc:	080048b4 	.word	0x080048b4
 80043d0:	080048b4 	.word	0x080048b4
 80043d4:	080048b4 	.word	0x080048b4
 80043d8:	080048b8 	.word	0x080048b8

080043dc <__retarget_lock_init_recursive>:
 80043dc:	4770      	bx	lr

080043de <__retarget_lock_acquire_recursive>:
 80043de:	4770      	bx	lr

080043e0 <__retarget_lock_release_recursive>:
 80043e0:	4770      	bx	lr
	...

080043e4 <_free_r>:
 80043e4:	b538      	push	{r3, r4, r5, lr}
 80043e6:	4605      	mov	r5, r0
 80043e8:	2900      	cmp	r1, #0
 80043ea:	d041      	beq.n	8004470 <_free_r+0x8c>
 80043ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f0:	1f0c      	subs	r4, r1, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	bfb8      	it	lt
 80043f6:	18e4      	addlt	r4, r4, r3
 80043f8:	f000 f8e0 	bl	80045bc <__malloc_lock>
 80043fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004474 <_free_r+0x90>)
 80043fe:	6813      	ldr	r3, [r2, #0]
 8004400:	b933      	cbnz	r3, 8004410 <_free_r+0x2c>
 8004402:	6063      	str	r3, [r4, #4]
 8004404:	6014      	str	r4, [r2, #0]
 8004406:	4628      	mov	r0, r5
 8004408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800440c:	f000 b8dc 	b.w	80045c8 <__malloc_unlock>
 8004410:	42a3      	cmp	r3, r4
 8004412:	d908      	bls.n	8004426 <_free_r+0x42>
 8004414:	6820      	ldr	r0, [r4, #0]
 8004416:	1821      	adds	r1, r4, r0
 8004418:	428b      	cmp	r3, r1
 800441a:	bf01      	itttt	eq
 800441c:	6819      	ldreq	r1, [r3, #0]
 800441e:	685b      	ldreq	r3, [r3, #4]
 8004420:	1809      	addeq	r1, r1, r0
 8004422:	6021      	streq	r1, [r4, #0]
 8004424:	e7ed      	b.n	8004402 <_free_r+0x1e>
 8004426:	461a      	mov	r2, r3
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	b10b      	cbz	r3, 8004430 <_free_r+0x4c>
 800442c:	42a3      	cmp	r3, r4
 800442e:	d9fa      	bls.n	8004426 <_free_r+0x42>
 8004430:	6811      	ldr	r1, [r2, #0]
 8004432:	1850      	adds	r0, r2, r1
 8004434:	42a0      	cmp	r0, r4
 8004436:	d10b      	bne.n	8004450 <_free_r+0x6c>
 8004438:	6820      	ldr	r0, [r4, #0]
 800443a:	4401      	add	r1, r0
 800443c:	1850      	adds	r0, r2, r1
 800443e:	4283      	cmp	r3, r0
 8004440:	6011      	str	r1, [r2, #0]
 8004442:	d1e0      	bne.n	8004406 <_free_r+0x22>
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	6053      	str	r3, [r2, #4]
 800444a:	4408      	add	r0, r1
 800444c:	6010      	str	r0, [r2, #0]
 800444e:	e7da      	b.n	8004406 <_free_r+0x22>
 8004450:	d902      	bls.n	8004458 <_free_r+0x74>
 8004452:	230c      	movs	r3, #12
 8004454:	602b      	str	r3, [r5, #0]
 8004456:	e7d6      	b.n	8004406 <_free_r+0x22>
 8004458:	6820      	ldr	r0, [r4, #0]
 800445a:	1821      	adds	r1, r4, r0
 800445c:	428b      	cmp	r3, r1
 800445e:	bf04      	itt	eq
 8004460:	6819      	ldreq	r1, [r3, #0]
 8004462:	685b      	ldreq	r3, [r3, #4]
 8004464:	6063      	str	r3, [r4, #4]
 8004466:	bf04      	itt	eq
 8004468:	1809      	addeq	r1, r1, r0
 800446a:	6021      	streq	r1, [r4, #0]
 800446c:	6054      	str	r4, [r2, #4]
 800446e:	e7ca      	b.n	8004406 <_free_r+0x22>
 8004470:	bd38      	pop	{r3, r4, r5, pc}
 8004472:	bf00      	nop
 8004474:	200002c0 	.word	0x200002c0

08004478 <sbrk_aligned>:
 8004478:	b570      	push	{r4, r5, r6, lr}
 800447a:	4e0f      	ldr	r6, [pc, #60]	@ (80044b8 <sbrk_aligned+0x40>)
 800447c:	460c      	mov	r4, r1
 800447e:	6831      	ldr	r1, [r6, #0]
 8004480:	4605      	mov	r5, r0
 8004482:	b911      	cbnz	r1, 800448a <sbrk_aligned+0x12>
 8004484:	f000 f9d6 	bl	8004834 <_sbrk_r>
 8004488:	6030      	str	r0, [r6, #0]
 800448a:	4621      	mov	r1, r4
 800448c:	4628      	mov	r0, r5
 800448e:	f000 f9d1 	bl	8004834 <_sbrk_r>
 8004492:	1c43      	adds	r3, r0, #1
 8004494:	d103      	bne.n	800449e <sbrk_aligned+0x26>
 8004496:	f04f 34ff 	mov.w	r4, #4294967295
 800449a:	4620      	mov	r0, r4
 800449c:	bd70      	pop	{r4, r5, r6, pc}
 800449e:	1cc4      	adds	r4, r0, #3
 80044a0:	f024 0403 	bic.w	r4, r4, #3
 80044a4:	42a0      	cmp	r0, r4
 80044a6:	d0f8      	beq.n	800449a <sbrk_aligned+0x22>
 80044a8:	1a21      	subs	r1, r4, r0
 80044aa:	4628      	mov	r0, r5
 80044ac:	f000 f9c2 	bl	8004834 <_sbrk_r>
 80044b0:	3001      	adds	r0, #1
 80044b2:	d1f2      	bne.n	800449a <sbrk_aligned+0x22>
 80044b4:	e7ef      	b.n	8004496 <sbrk_aligned+0x1e>
 80044b6:	bf00      	nop
 80044b8:	200002bc 	.word	0x200002bc

080044bc <_malloc_r>:
 80044bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c0:	1ccd      	adds	r5, r1, #3
 80044c2:	f025 0503 	bic.w	r5, r5, #3
 80044c6:	3508      	adds	r5, #8
 80044c8:	2d0c      	cmp	r5, #12
 80044ca:	bf38      	it	cc
 80044cc:	250c      	movcc	r5, #12
 80044ce:	2d00      	cmp	r5, #0
 80044d0:	4606      	mov	r6, r0
 80044d2:	db01      	blt.n	80044d8 <_malloc_r+0x1c>
 80044d4:	42a9      	cmp	r1, r5
 80044d6:	d904      	bls.n	80044e2 <_malloc_r+0x26>
 80044d8:	230c      	movs	r3, #12
 80044da:	6033      	str	r3, [r6, #0]
 80044dc:	2000      	movs	r0, #0
 80044de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045b8 <_malloc_r+0xfc>
 80044e6:	f000 f869 	bl	80045bc <__malloc_lock>
 80044ea:	f8d8 3000 	ldr.w	r3, [r8]
 80044ee:	461c      	mov	r4, r3
 80044f0:	bb44      	cbnz	r4, 8004544 <_malloc_r+0x88>
 80044f2:	4629      	mov	r1, r5
 80044f4:	4630      	mov	r0, r6
 80044f6:	f7ff ffbf 	bl	8004478 <sbrk_aligned>
 80044fa:	1c43      	adds	r3, r0, #1
 80044fc:	4604      	mov	r4, r0
 80044fe:	d158      	bne.n	80045b2 <_malloc_r+0xf6>
 8004500:	f8d8 4000 	ldr.w	r4, [r8]
 8004504:	4627      	mov	r7, r4
 8004506:	2f00      	cmp	r7, #0
 8004508:	d143      	bne.n	8004592 <_malloc_r+0xd6>
 800450a:	2c00      	cmp	r4, #0
 800450c:	d04b      	beq.n	80045a6 <_malloc_r+0xea>
 800450e:	6823      	ldr	r3, [r4, #0]
 8004510:	4639      	mov	r1, r7
 8004512:	4630      	mov	r0, r6
 8004514:	eb04 0903 	add.w	r9, r4, r3
 8004518:	f000 f98c 	bl	8004834 <_sbrk_r>
 800451c:	4581      	cmp	r9, r0
 800451e:	d142      	bne.n	80045a6 <_malloc_r+0xea>
 8004520:	6821      	ldr	r1, [r4, #0]
 8004522:	1a6d      	subs	r5, r5, r1
 8004524:	4629      	mov	r1, r5
 8004526:	4630      	mov	r0, r6
 8004528:	f7ff ffa6 	bl	8004478 <sbrk_aligned>
 800452c:	3001      	adds	r0, #1
 800452e:	d03a      	beq.n	80045a6 <_malloc_r+0xea>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	442b      	add	r3, r5
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	f8d8 3000 	ldr.w	r3, [r8]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	bb62      	cbnz	r2, 8004598 <_malloc_r+0xdc>
 800453e:	f8c8 7000 	str.w	r7, [r8]
 8004542:	e00f      	b.n	8004564 <_malloc_r+0xa8>
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	1b52      	subs	r2, r2, r5
 8004548:	d420      	bmi.n	800458c <_malloc_r+0xd0>
 800454a:	2a0b      	cmp	r2, #11
 800454c:	d917      	bls.n	800457e <_malloc_r+0xc2>
 800454e:	1961      	adds	r1, r4, r5
 8004550:	42a3      	cmp	r3, r4
 8004552:	6025      	str	r5, [r4, #0]
 8004554:	bf18      	it	ne
 8004556:	6059      	strne	r1, [r3, #4]
 8004558:	6863      	ldr	r3, [r4, #4]
 800455a:	bf08      	it	eq
 800455c:	f8c8 1000 	streq.w	r1, [r8]
 8004560:	5162      	str	r2, [r4, r5]
 8004562:	604b      	str	r3, [r1, #4]
 8004564:	4630      	mov	r0, r6
 8004566:	f000 f82f 	bl	80045c8 <__malloc_unlock>
 800456a:	f104 000b 	add.w	r0, r4, #11
 800456e:	1d23      	adds	r3, r4, #4
 8004570:	f020 0007 	bic.w	r0, r0, #7
 8004574:	1ac2      	subs	r2, r0, r3
 8004576:	bf1c      	itt	ne
 8004578:	1a1b      	subne	r3, r3, r0
 800457a:	50a3      	strne	r3, [r4, r2]
 800457c:	e7af      	b.n	80044de <_malloc_r+0x22>
 800457e:	6862      	ldr	r2, [r4, #4]
 8004580:	42a3      	cmp	r3, r4
 8004582:	bf0c      	ite	eq
 8004584:	f8c8 2000 	streq.w	r2, [r8]
 8004588:	605a      	strne	r2, [r3, #4]
 800458a:	e7eb      	b.n	8004564 <_malloc_r+0xa8>
 800458c:	4623      	mov	r3, r4
 800458e:	6864      	ldr	r4, [r4, #4]
 8004590:	e7ae      	b.n	80044f0 <_malloc_r+0x34>
 8004592:	463c      	mov	r4, r7
 8004594:	687f      	ldr	r7, [r7, #4]
 8004596:	e7b6      	b.n	8004506 <_malloc_r+0x4a>
 8004598:	461a      	mov	r2, r3
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	42a3      	cmp	r3, r4
 800459e:	d1fb      	bne.n	8004598 <_malloc_r+0xdc>
 80045a0:	2300      	movs	r3, #0
 80045a2:	6053      	str	r3, [r2, #4]
 80045a4:	e7de      	b.n	8004564 <_malloc_r+0xa8>
 80045a6:	230c      	movs	r3, #12
 80045a8:	6033      	str	r3, [r6, #0]
 80045aa:	4630      	mov	r0, r6
 80045ac:	f000 f80c 	bl	80045c8 <__malloc_unlock>
 80045b0:	e794      	b.n	80044dc <_malloc_r+0x20>
 80045b2:	6005      	str	r5, [r0, #0]
 80045b4:	e7d6      	b.n	8004564 <_malloc_r+0xa8>
 80045b6:	bf00      	nop
 80045b8:	200002c0 	.word	0x200002c0

080045bc <__malloc_lock>:
 80045bc:	4801      	ldr	r0, [pc, #4]	@ (80045c4 <__malloc_lock+0x8>)
 80045be:	f7ff bf0e 	b.w	80043de <__retarget_lock_acquire_recursive>
 80045c2:	bf00      	nop
 80045c4:	200002b8 	.word	0x200002b8

080045c8 <__malloc_unlock>:
 80045c8:	4801      	ldr	r0, [pc, #4]	@ (80045d0 <__malloc_unlock+0x8>)
 80045ca:	f7ff bf09 	b.w	80043e0 <__retarget_lock_release_recursive>
 80045ce:	bf00      	nop
 80045d0:	200002b8 	.word	0x200002b8

080045d4 <__sflush_r>:
 80045d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045dc:	0716      	lsls	r6, r2, #28
 80045de:	4605      	mov	r5, r0
 80045e0:	460c      	mov	r4, r1
 80045e2:	d454      	bmi.n	800468e <__sflush_r+0xba>
 80045e4:	684b      	ldr	r3, [r1, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	dc02      	bgt.n	80045f0 <__sflush_r+0x1c>
 80045ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	dd48      	ble.n	8004682 <__sflush_r+0xae>
 80045f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80045f2:	2e00      	cmp	r6, #0
 80045f4:	d045      	beq.n	8004682 <__sflush_r+0xae>
 80045f6:	2300      	movs	r3, #0
 80045f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80045fc:	682f      	ldr	r7, [r5, #0]
 80045fe:	6a21      	ldr	r1, [r4, #32]
 8004600:	602b      	str	r3, [r5, #0]
 8004602:	d030      	beq.n	8004666 <__sflush_r+0x92>
 8004604:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	0759      	lsls	r1, r3, #29
 800460a:	d505      	bpl.n	8004618 <__sflush_r+0x44>
 800460c:	6863      	ldr	r3, [r4, #4]
 800460e:	1ad2      	subs	r2, r2, r3
 8004610:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004612:	b10b      	cbz	r3, 8004618 <__sflush_r+0x44>
 8004614:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004616:	1ad2      	subs	r2, r2, r3
 8004618:	2300      	movs	r3, #0
 800461a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800461c:	6a21      	ldr	r1, [r4, #32]
 800461e:	4628      	mov	r0, r5
 8004620:	47b0      	blx	r6
 8004622:	1c43      	adds	r3, r0, #1
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	d106      	bne.n	8004636 <__sflush_r+0x62>
 8004628:	6829      	ldr	r1, [r5, #0]
 800462a:	291d      	cmp	r1, #29
 800462c:	d82b      	bhi.n	8004686 <__sflush_r+0xb2>
 800462e:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <__sflush_r+0x104>)
 8004630:	40ca      	lsrs	r2, r1
 8004632:	07d6      	lsls	r6, r2, #31
 8004634:	d527      	bpl.n	8004686 <__sflush_r+0xb2>
 8004636:	2200      	movs	r2, #0
 8004638:	6062      	str	r2, [r4, #4]
 800463a:	04d9      	lsls	r1, r3, #19
 800463c:	6922      	ldr	r2, [r4, #16]
 800463e:	6022      	str	r2, [r4, #0]
 8004640:	d504      	bpl.n	800464c <__sflush_r+0x78>
 8004642:	1c42      	adds	r2, r0, #1
 8004644:	d101      	bne.n	800464a <__sflush_r+0x76>
 8004646:	682b      	ldr	r3, [r5, #0]
 8004648:	b903      	cbnz	r3, 800464c <__sflush_r+0x78>
 800464a:	6560      	str	r0, [r4, #84]	@ 0x54
 800464c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800464e:	602f      	str	r7, [r5, #0]
 8004650:	b1b9      	cbz	r1, 8004682 <__sflush_r+0xae>
 8004652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004656:	4299      	cmp	r1, r3
 8004658:	d002      	beq.n	8004660 <__sflush_r+0x8c>
 800465a:	4628      	mov	r0, r5
 800465c:	f7ff fec2 	bl	80043e4 <_free_r>
 8004660:	2300      	movs	r3, #0
 8004662:	6363      	str	r3, [r4, #52]	@ 0x34
 8004664:	e00d      	b.n	8004682 <__sflush_r+0xae>
 8004666:	2301      	movs	r3, #1
 8004668:	4628      	mov	r0, r5
 800466a:	47b0      	blx	r6
 800466c:	4602      	mov	r2, r0
 800466e:	1c50      	adds	r0, r2, #1
 8004670:	d1c9      	bne.n	8004606 <__sflush_r+0x32>
 8004672:	682b      	ldr	r3, [r5, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0c6      	beq.n	8004606 <__sflush_r+0x32>
 8004678:	2b1d      	cmp	r3, #29
 800467a:	d001      	beq.n	8004680 <__sflush_r+0xac>
 800467c:	2b16      	cmp	r3, #22
 800467e:	d11e      	bne.n	80046be <__sflush_r+0xea>
 8004680:	602f      	str	r7, [r5, #0]
 8004682:	2000      	movs	r0, #0
 8004684:	e022      	b.n	80046cc <__sflush_r+0xf8>
 8004686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800468a:	b21b      	sxth	r3, r3
 800468c:	e01b      	b.n	80046c6 <__sflush_r+0xf2>
 800468e:	690f      	ldr	r7, [r1, #16]
 8004690:	2f00      	cmp	r7, #0
 8004692:	d0f6      	beq.n	8004682 <__sflush_r+0xae>
 8004694:	0793      	lsls	r3, r2, #30
 8004696:	680e      	ldr	r6, [r1, #0]
 8004698:	bf08      	it	eq
 800469a:	694b      	ldreq	r3, [r1, #20]
 800469c:	600f      	str	r7, [r1, #0]
 800469e:	bf18      	it	ne
 80046a0:	2300      	movne	r3, #0
 80046a2:	eba6 0807 	sub.w	r8, r6, r7
 80046a6:	608b      	str	r3, [r1, #8]
 80046a8:	f1b8 0f00 	cmp.w	r8, #0
 80046ac:	dde9      	ble.n	8004682 <__sflush_r+0xae>
 80046ae:	6a21      	ldr	r1, [r4, #32]
 80046b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80046b2:	4643      	mov	r3, r8
 80046b4:	463a      	mov	r2, r7
 80046b6:	4628      	mov	r0, r5
 80046b8:	47b0      	blx	r6
 80046ba:	2800      	cmp	r0, #0
 80046bc:	dc08      	bgt.n	80046d0 <__sflush_r+0xfc>
 80046be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	f04f 30ff 	mov.w	r0, #4294967295
 80046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d0:	4407      	add	r7, r0
 80046d2:	eba8 0800 	sub.w	r8, r8, r0
 80046d6:	e7e7      	b.n	80046a8 <__sflush_r+0xd4>
 80046d8:	20400001 	.word	0x20400001

080046dc <_fflush_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	690b      	ldr	r3, [r1, #16]
 80046e0:	4605      	mov	r5, r0
 80046e2:	460c      	mov	r4, r1
 80046e4:	b913      	cbnz	r3, 80046ec <_fflush_r+0x10>
 80046e6:	2500      	movs	r5, #0
 80046e8:	4628      	mov	r0, r5
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	b118      	cbz	r0, 80046f6 <_fflush_r+0x1a>
 80046ee:	6a03      	ldr	r3, [r0, #32]
 80046f0:	b90b      	cbnz	r3, 80046f6 <_fflush_r+0x1a>
 80046f2:	f7ff fc8f 	bl	8004014 <__sinit>
 80046f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f3      	beq.n	80046e6 <_fflush_r+0xa>
 80046fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004700:	07d0      	lsls	r0, r2, #31
 8004702:	d404      	bmi.n	800470e <_fflush_r+0x32>
 8004704:	0599      	lsls	r1, r3, #22
 8004706:	d402      	bmi.n	800470e <_fflush_r+0x32>
 8004708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800470a:	f7ff fe68 	bl	80043de <__retarget_lock_acquire_recursive>
 800470e:	4628      	mov	r0, r5
 8004710:	4621      	mov	r1, r4
 8004712:	f7ff ff5f 	bl	80045d4 <__sflush_r>
 8004716:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004718:	07da      	lsls	r2, r3, #31
 800471a:	4605      	mov	r5, r0
 800471c:	d4e4      	bmi.n	80046e8 <_fflush_r+0xc>
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	059b      	lsls	r3, r3, #22
 8004722:	d4e1      	bmi.n	80046e8 <_fflush_r+0xc>
 8004724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004726:	f7ff fe5b 	bl	80043e0 <__retarget_lock_release_recursive>
 800472a:	e7dd      	b.n	80046e8 <_fflush_r+0xc>

0800472c <__swhatbuf_r>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	460c      	mov	r4, r1
 8004730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004734:	2900      	cmp	r1, #0
 8004736:	b096      	sub	sp, #88	@ 0x58
 8004738:	4615      	mov	r5, r2
 800473a:	461e      	mov	r6, r3
 800473c:	da0d      	bge.n	800475a <__swhatbuf_r+0x2e>
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	bf14      	ite	ne
 800474a:	2340      	movne	r3, #64	@ 0x40
 800474c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004750:	2000      	movs	r0, #0
 8004752:	6031      	str	r1, [r6, #0]
 8004754:	602b      	str	r3, [r5, #0]
 8004756:	b016      	add	sp, #88	@ 0x58
 8004758:	bd70      	pop	{r4, r5, r6, pc}
 800475a:	466a      	mov	r2, sp
 800475c:	f000 f848 	bl	80047f0 <_fstat_r>
 8004760:	2800      	cmp	r0, #0
 8004762:	dbec      	blt.n	800473e <__swhatbuf_r+0x12>
 8004764:	9901      	ldr	r1, [sp, #4]
 8004766:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800476a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800476e:	4259      	negs	r1, r3
 8004770:	4159      	adcs	r1, r3
 8004772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004776:	e7eb      	b.n	8004750 <__swhatbuf_r+0x24>

08004778 <__smakebuf_r>:
 8004778:	898b      	ldrh	r3, [r1, #12]
 800477a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800477c:	079d      	lsls	r5, r3, #30
 800477e:	4606      	mov	r6, r0
 8004780:	460c      	mov	r4, r1
 8004782:	d507      	bpl.n	8004794 <__smakebuf_r+0x1c>
 8004784:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	6123      	str	r3, [r4, #16]
 800478c:	2301      	movs	r3, #1
 800478e:	6163      	str	r3, [r4, #20]
 8004790:	b003      	add	sp, #12
 8004792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004794:	ab01      	add	r3, sp, #4
 8004796:	466a      	mov	r2, sp
 8004798:	f7ff ffc8 	bl	800472c <__swhatbuf_r>
 800479c:	9f00      	ldr	r7, [sp, #0]
 800479e:	4605      	mov	r5, r0
 80047a0:	4639      	mov	r1, r7
 80047a2:	4630      	mov	r0, r6
 80047a4:	f7ff fe8a 	bl	80044bc <_malloc_r>
 80047a8:	b948      	cbnz	r0, 80047be <__smakebuf_r+0x46>
 80047aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ae:	059a      	lsls	r2, r3, #22
 80047b0:	d4ee      	bmi.n	8004790 <__smakebuf_r+0x18>
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	81a3      	strh	r3, [r4, #12]
 80047bc:	e7e2      	b.n	8004784 <__smakebuf_r+0xc>
 80047be:	89a3      	ldrh	r3, [r4, #12]
 80047c0:	6020      	str	r0, [r4, #0]
 80047c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047c6:	81a3      	strh	r3, [r4, #12]
 80047c8:	9b01      	ldr	r3, [sp, #4]
 80047ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80047ce:	b15b      	cbz	r3, 80047e8 <__smakebuf_r+0x70>
 80047d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047d4:	4630      	mov	r0, r6
 80047d6:	f000 f81d 	bl	8004814 <_isatty_r>
 80047da:	b128      	cbz	r0, 80047e8 <__smakebuf_r+0x70>
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	81a3      	strh	r3, [r4, #12]
 80047e8:	89a3      	ldrh	r3, [r4, #12]
 80047ea:	431d      	orrs	r5, r3
 80047ec:	81a5      	strh	r5, [r4, #12]
 80047ee:	e7cf      	b.n	8004790 <__smakebuf_r+0x18>

080047f0 <_fstat_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4d07      	ldr	r5, [pc, #28]	@ (8004810 <_fstat_r+0x20>)
 80047f4:	2300      	movs	r3, #0
 80047f6:	4604      	mov	r4, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	4611      	mov	r1, r2
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	f7fc fb5c 	bl	8000eba <_fstat>
 8004802:	1c43      	adds	r3, r0, #1
 8004804:	d102      	bne.n	800480c <_fstat_r+0x1c>
 8004806:	682b      	ldr	r3, [r5, #0]
 8004808:	b103      	cbz	r3, 800480c <_fstat_r+0x1c>
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	bd38      	pop	{r3, r4, r5, pc}
 800480e:	bf00      	nop
 8004810:	200002b4 	.word	0x200002b4

08004814 <_isatty_r>:
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4d06      	ldr	r5, [pc, #24]	@ (8004830 <_isatty_r+0x1c>)
 8004818:	2300      	movs	r3, #0
 800481a:	4604      	mov	r4, r0
 800481c:	4608      	mov	r0, r1
 800481e:	602b      	str	r3, [r5, #0]
 8004820:	f7fc fb5b 	bl	8000eda <_isatty>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d102      	bne.n	800482e <_isatty_r+0x1a>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	b103      	cbz	r3, 800482e <_isatty_r+0x1a>
 800482c:	6023      	str	r3, [r4, #0]
 800482e:	bd38      	pop	{r3, r4, r5, pc}
 8004830:	200002b4 	.word	0x200002b4

08004834 <_sbrk_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4d06      	ldr	r5, [pc, #24]	@ (8004850 <_sbrk_r+0x1c>)
 8004838:	2300      	movs	r3, #0
 800483a:	4604      	mov	r4, r0
 800483c:	4608      	mov	r0, r1
 800483e:	602b      	str	r3, [r5, #0]
 8004840:	f7fc fb64 	bl	8000f0c <_sbrk>
 8004844:	1c43      	adds	r3, r0, #1
 8004846:	d102      	bne.n	800484e <_sbrk_r+0x1a>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	b103      	cbz	r3, 800484e <_sbrk_r+0x1a>
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	bd38      	pop	{r3, r4, r5, pc}
 8004850:	200002b4 	.word	0x200002b4

08004854 <_init>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	bf00      	nop
 8004858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800485a:	bc08      	pop	{r3}
 800485c:	469e      	mov	lr, r3
 800485e:	4770      	bx	lr

08004860 <_fini>:
 8004860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004862:	bf00      	nop
 8004864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004866:	bc08      	pop	{r3}
 8004868:	469e      	mov	lr, r3
 800486a:	4770      	bx	lr
